Microsoft (R) Macro Assembler Version 14.00.23506.0	    11/16/19 12:46:08
BST.asm							     Page 1 - 1


				INCLUDE Irvine32.inc 
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				traverseInOrder proto , rootNode : ptr byte
				searchInTree proto , rootNode : ptr byte , value : dword
				findMax proto , rootNode : ptr byte
				findMin proto , rootNode : ptr byte
 00000000			.data
 00000000 00000005		array dword 5,4,8,6,7,10,2,3,11,14,13,12,26
	   00000004
	   00000008
	   00000006
	   00000007
	   0000000A
	   00000002
	   00000003
	   0000000B
	   0000000E
	   0000000D
	   0000000C
	   0000001A
 00000034 00000004		multi dword 4
 00000038 00000004		dividend dword 4
 0000003C 00000000		tempIndex dword ?
 00000040 00000001		maxValue dword 1
 00000044 00000001		minValue dword 1
 00000048 49 6E 73 65 72	p1 byte "Inserting values : ",0
	   74 69 6E 67 20
	   76 61 6C 75 65
	   73 20 3A 20 00
 0000005C 54 72 61 76 65	p2 byte "Traversing binray Tree in order",0
	   72 73 69 6E 67
	   20 62 69 6E 72
	   61 79 20 54 72
	   65 65 20 69 6E
	   20 6F 72 64 65
	   72 00
 0000007C 45 6E 74 65 72	p3 byte "Enter value to search in tree : ",0
	   20 76 61 6C 75
	   65 20 74 6F 20
	   73 65 61 72 63
	   68 20 69 6E 20
	   74 72 65 65 20
	   3A 20 00
 0000009D 56 61 6C 75 65	foundString byte "Value found in tree ",0
	   20 66 6F 75 6E
	   64 20 69 6E 20
	   74 72 65 65 20
	   00
 000000B2 56 61 6C 75 65	nFoundString byte "Value not found in tree ",0
	   20 6E 6F 74 20
	   66 6F 75 6E 64
	   20 69 6E 20 74
	   72 65 65 20 00
 000000CB 4D 61 78 20 76	maxString byte "Max value in tree : ",0
	   61 6C 75 65 20
	   69 6E 20 74 72
	   65 65 20 3A 20
	   00
 000000E0 4D 69 6E 20 76	minString byte "Min value in tree ",0
	   61 6C 75 65 20
	   69 6E 20 74 72
	   65 65 20 00
 000000F3  000003E8 [		bst dword 1000 dup(1)
	    00000001
	   ]
 00000000			.code
 00000000			main PROC
				;-------------------------
 00000000  BA 00000048 R	mov edx , offset p1
 00000005  E8 00000000 E	call writeString
 0000000A  E8 00000000 E	call crlf
 0000000F  BA 00000004		mov edx , 4
 00000014  B8 00000000		mov eax , 0
 00000019  BB 00000000		mov ebx , 0
 0000001E  B9 00000000		mov ecx , 0
 00000023  C7 05 000000F3 R	mov [bst] , 5
	   00000005
 0000002D  B9 0000000D		mov ecx, lengthof array
 00000032  BF 000000F3 R	mov edi , offset bst


 00000037			l1:

 00000037  8B 9A 00000000 R	mov ebx, array[edx]
 0000003D  89 15 0000003C R	mov tempIndex , edx

 00000043  68 000000F7 R	push offset [bst + 4]
 00000048  68 000000FB R	push offset [bst + 8]

 0000004D  E8 00000110		call insert

 00000052  83 C4 08		add esp , 8
 00000055  BF 000000F3 R	mov edi , offset bst
 0000005A  8B 15 0000003C R	mov edx , tempIndex
 00000060  83 C2 04		add edx , 4

 00000063  E2 D2		loop l1

 00000065  E8 00000000 E	call crlf
 0000006A  B9 0000000F		mov ecx, 15
 0000006F  BE 00000000		mov esi, 0

 00000074			l4:

 00000074  8B 86 000000F3 R	mov eax , bst[esi]
 0000007A  E8 00000000 E	call writeDec
 0000007F  E8 00000000 E	call crlf
 00000084  83 C6 04		add esi , 4
 00000087  E2 EB		loop l4
				;-----------------------------------
 00000089  E8 00000000 E	call crlf

 0000008E  BA 0000005C R	mov edx , offset p2
 00000093  E8 00000000 E	call writeString
 00000098  E8 00000000 E	call crlf

 0000009D  BA 00000000		mov edx , 0
 000000A2  B8 00000000		mov eax , 0
 000000A7  BB 00000000		mov ebx , 0
 000000AC  B9 00000000		mov ecx , 0

 000000B1  BE 000000F3 R	mov esi , offset bst
				invoke traverseInOrder , addr bst


				;----------------------------------------------

 000000C0  BA 0000007C R	mov edx , offset p3
 000000C5  E8 00000000 E	call writestring
 000000CA  E8 00000000 E	call crlf
 000000CF  E8 00000000 E	call readInt
 000000D4  BA 00000000		mov edx , 0
 000000D9  BB 00000000		mov ebx , 0
 000000DE  B9 00000000		mov ecx , 0

				invoke searchInTree , offset bst , eax

 000000EE  83 F9 01		cmp ecx , 1
 000000F1  74 02		je found
 000000F3  EB 11		jmp notFound

 000000F5			found:
 000000F5  BA 0000009D R	mov edx , offset foundString
 000000FA  E8 00000000 E	call writeString
 000000FF  E8 00000000 E	call crlf
 00000104  EB 55		jmp final

 00000106			notFound:
 00000106  BA 000000B2 R	mov edx , offset nFoundString
 0000010B  E8 00000000 E	call writeString
 00000110  E8 00000000 E	call crlf



				;-------------------------------------------

				invoke findMax , offset bst
 0000011F  BA 000000CB R	mov edx , offset maxString
 00000124  E8 00000000 E	call writeString
 00000129  A1 00000040 R	mov eax , maxValue
 0000012E  E8 00000000 E	call writeDec
 00000133  E8 00000000 E	call crlf

				;-------------------------------------------

				invoke findMin , offset bst
 00000142  BA 000000E0 R	mov edx , offset minString
 00000147  E8 00000000 E	call writeString
 0000014C  A1 00000044 R	mov eax , minValue
 00000151  E8 00000000 E	call writeDec
 00000156  E8 00000000 E	call crlf


 0000015B			final:
				exit


 00000162			main endp
				;//////////////////////////////////////////////// Insert Function //////////////////////////////////////////
 00000162			insert proc

 00000162  55			push ebp
 00000163  8B EC		mov ebp , esp

 00000165  3B 1F		cmp ebx , [edi]
 00000167  0F 84 000000B0	je final

 0000016D  8B 07		mov eax , [edi]

 0000016F  3B D8		cmp  ebx , eax
 00000171  72 02		jb leftNode
 00000173  EB 4C		jmp rightNode

 00000175			leftNode:
 00000175  8B 45 0C		mov eax, [ebp + 12]
 00000178  8B 00		mov eax , [eax]
 0000017A  83 F8 01		cmp eax , 1
 0000017D  74 2F		je assignValueAtLeft

 0000017F  8B 45 0C		mov eax , [ebp + 12]
 00000182  8B F8		mov edi , eax
 00000184  2D 000000F3 R	sub eax , offset bst
 00000189  F7 25 00000034 R	mul multi
 0000018F  BA 00000000		mov edx , 0
 00000194  F7 35 00000038 R	div dividend
 0000019A  8B 75 0C		mov esi , [ebp + 12]
 0000019D  03 F0		add esi , eax 

 0000019F  83 C6 04		add esi , 4
 000001A2  56			push esi
 000001A3  83 C6 04		add esi , 4
 000001A6  56			push esi

 000001A7  E8 FFFFFFB6		call insert 
 000001AC  EB 6F		jmp final

 000001AE			assignValueAtLeft:
 000001AE  8B 75 0C		mov esi , [ebp + 12]
 000001B1  89 1E		mov [esi] , ebx
 000001B3  8B 06		mov eax , [esi]
 000001B5  E8 00000000 E	call writeDec
 000001BA  E8 00000000 E	call crlf
 000001BF  EB 5C		jmp final

 000001C1			rightNode:
 000001C1  8B 45 08		mov eax, [ebp + 8]
 000001C4  8B 00		mov eax , [eax]
 000001C6  83 F8 01		cmp eax ,1
 000001C9  74 2F		je assignValueAtRight
 000001CB  8B 45 08		mov eax , [ebp + 8]
 000001CE  8B F8		mov edi , eax
 000001D0  2D 000000F3 R	sub eax , offset bst
 000001D5  F7 25 00000034 R	mul multi
 000001DB  BA 00000000		mov edx , 0
 000001E0  F7 35 00000038 R	div dividend
 000001E6  8B 75 08		mov esi , [ebp + 8]
 000001E9  03 F0		add esi , eax 

 000001EB  83 C6 04		add esi , 4
 000001EE  56			push esi
 000001EF  83 C6 04		add esi , 4
 000001F2  56			push esi

 000001F3  E8 FFFFFF6A		call insert
 000001F8  EB 23		jmp final

 000001FA			assignValueAtRight:
 000001FA  8B 75 08		mov esi , [ebp + 8]
 000001FD  89 1E		mov [esi] , ebx
 000001FF  8B 06		mov eax , [esi]
 00000201  E8 00000000 E	call writeDec
 00000206  E8 00000000 E	call crlf
 0000020B  EB 10		jmp final

 0000020D			assigValueAtRoot:
 0000020D  89 1F		mov [edi] , ebx
 0000020F  8B 07		mov eax , [edi]
 00000211  E8 00000000 E	call writeDec
 00000216  E8 00000000 E	call crlf
 0000021B  EB 00		jmp final

 0000021D			final:

 0000021D  8B E5		mov esp , ebp
 0000021F  5D			pop ebp 

 00000220  C2 0008		ret 8

 00000223			insert endp
				;///////////////////////////////////////////////// Traverse Function ///////////////////////////////////////
 00000223			traverseInOrder proc , rootNode : ptr byte

 00000226  8B 45 08		mov eax , rootNode
 00000229  8B 5D 08		mov ebx , rootNode
 0000022C  2B C6		sub eax , esi
 0000022E  F7 25 00000034 R	mul multi
 00000234  BA 00000000		mov edx , 0
 00000239  F7 35 00000038 R	div dividend
 0000023F  03 D8		add ebx , eax
 00000241  83 C3 04		add ebx , 4
 00000244  8B 03		mov eax , [ebx]

 00000246  83 F8 01		cmp eax , 1
 00000249  75 3E		jne traverseLeftNode

 0000024B			print:
 0000024B  8B 45 08		mov eax , [rootNode]
 0000024E  8B 00		mov eax , [eax]
 00000250  E8 00000000 E	call writeDec
 00000255  E8 00000000 E	call crlf

 0000025A  8B 45 08		mov eax , rootNode
 0000025D  8B 5D 08		mov ebx , rootNode
 00000260  2B C6		sub eax , esi
 00000262  F7 25 00000034 R	mul multi
 00000268  BA 00000000		mov edx , 0
 0000026D  F7 35 00000038 R	div dividend
 00000273  03 D8		add ebx , eax
 00000275  83 C3 08		add ebx , 8
 00000278  8B 03		mov eax , [ebx]

 0000027A  83 F8 01		cmp eax , 1
 0000027D  75 02		jne traverseRightNode
 0000027F  EB 10		jmp final

 00000281			traverseRightNode:
				invoke traverseInOrder , ebx
 00000287  EB 08		jmp final

 00000289			traverseLeftNode:
				invoke traverseInOrder , ebx
 0000028F  EB BA		jmp print

 00000291			final:
				ret
 00000295			traverseInOrder endp
				;////////////////////////////////////////// Search Function ////////////////////////////////////////////

 00000295			searchInTree proc , rootNode : ptr byte , value : dword

 00000298  8B 45 08		mov eax , [rootNode]
 0000029B  8B 00		mov eax , [eax]
 0000029D  8B 55 0C		mov edx , value
 000002A0  3B C2		cmp eax , edx
 000002A2  74 68		je found

 000002A4  8B 45 08		mov eax , rootNode
 000002A7  8B 5D 08		mov ebx , rootNode
 000002AA  2D 000000F3 R	sub eax , offset bst
 000002AF  F7 25 00000034 R	mul multi
 000002B5  BA 00000000		mov edx , 0
 000002BA  F7 35 00000038 R	div dividend
 000002C0  03 D8		add ebx , eax
 000002C2  83 C3 04		add ebx , 4
 000002C5  8B 03		mov eax , [ebx]

 000002C7  83 F8 01		cmp eax , 1
 000002CA  75 35		jne traverseLeftNode

 000002CC			comeBack:
 000002CC  8B 45 08		mov eax , rootNode
 000002CF  8B 5D 08		mov ebx , rootNode
 000002D2  2D 000000F3 R	sub eax , offset bst
 000002D7  F7 25 00000034 R	mul multi
 000002DD  BA 00000000		mov edx , 0
 000002E2  F7 35 00000038 R	div dividend
 000002E8  03 D8		add ebx , eax
 000002EA  83 C3 08		add ebx , 8
 000002ED  8B 03		mov eax , [ebx]

 000002EF  83 F8 01		cmp eax , 1
 000002F2  75 02		jne traverseRightNode
 000002F4  EB 1B		jmp final

 000002F6			traverseRightNode:
				invoke searchInTree , ebx , value
 000002FF  EB 10		jmp final

 00000301			traverseLeftNode:
				invoke searchInTree , ebx , value
 0000030A  EB C0		jmp comeBack

 0000030C			found:
 0000030C  B9 00000001		mov ecx , 1

 00000311			final:
				ret

 00000315			searchInTree endp
				;///////////////////////////////////// Max Function ///////////////////////////////////////////
 00000315			findMax proc , rootNode : ptr byte



 00000318  8B 45 08		mov eax , rootNode
 0000031B  8B 5D 08		mov ebx , rootNode
 0000031E  2D 000000F3 R	sub eax , offset bst
 00000323  F7 25 00000034 R	mul multi
 00000329  BA 00000000		mov edx , 0
 0000032E  F7 35 00000038 R	div dividend
 00000334  03 D8		add ebx , eax
 00000336  83 C3 08		add ebx , 8
 00000339  8B 03		mov eax , [ebx]

 0000033B  83 F8 01		cmp eax , 1
 0000033E  75 02		jne traverseRightNode
 00000340  EB 08		jmp foundMaxValue

 00000342			traverseRightNode:
				invoke findMax , ebx 
 00000348  EB 0A		jmp final

 0000034A			foundMaxValue:
 0000034A  8B 45 08		mov eax , [rootNode]
 0000034D  8B 00		mov eax , [eax]
 0000034F  A3 00000040 R	mov MaxValue , eax

 00000354			final:
				ret
 00000358			findMax endp
				;///////////////////////////////////// Min Function ///////////////////////////////////////////
 00000358			findMin proc , rootNode : ptr byte

 0000035B  8B 45 08		mov eax , rootNode
 0000035E  8B 5D 08		mov ebx , rootNode
 00000361  2D 000000F3 R	sub eax , offset bst
 00000366  F7 25 00000034 R	mul multi
 0000036C  BA 00000000		mov edx , 0
 00000371  F7 35 00000038 R	div dividend
 00000377  03 D8		add ebx , eax
 00000379  83 C3 04		add ebx , 4
 0000037C  8B 03		mov eax , [ebx]

 0000037E  83 F8 01		cmp eax , 1
 00000381  75 02		jne traverseLeftNode
 00000383  EB 08		jmp foundMaxValue

 00000385			traverseLeftNode:
				invoke findMin , ebx 
 0000038B  EB 0A		jmp final

 0000038D			foundMaxValue:
 0000038D  8B 45 08		mov eax , [rootNode]
 00000390  8B 00		mov eax , [eax]
 00000392  A3 00000044 R	mov minValue , eax

 00000397			final:
				ret
 0000039B			findMin endp
				end main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    11/16/19 12:46:08
BST.asm							     Symbols 2 - 1




Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00001093 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000039B Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
findMax  . . . . . . . . . . . .	P Near	 00000315 _TEXT	Length= 00000043 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  traverseRightNode  . . . . . .	L Near	 00000342 _TEXT	
  foundMaxValue  . . . . . . . .	L Near	 0000034A _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000354 _TEXT	
findMin  . . . . . . . . . . . .	P Near	 00000358 _TEXT	Length= 00000043 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  traverseLeftNode . . . . . . .	L Near	 00000385 _TEXT	
  foundMaxValue  . . . . . . . .	L Near	 0000038D _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000397 _TEXT	
insert . . . . . . . . . . . . .	P Near	 00000162 _TEXT	Length= 000000C1 Public STDCALL
  leftNode . . . . . . . . . . .	L Near	 00000175 _TEXT	
  assignValueAtLeft  . . . . . .	L Near	 000001AE _TEXT	
  rightNode  . . . . . . . . . .	L Near	 000001C1 _TEXT	
  assignValueAtRight . . . . . .	L Near	 000001FA _TEXT	
  assigValueAtRoot . . . . . . .	L Near	 0000020D _TEXT	
  final  . . . . . . . . . . . .	L Near	 0000021D _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 00000162 Public STDCALL
  l1 . . . . . . . . . . . . . .	L Near	 00000037 _TEXT	
  l4 . . . . . . . . . . . . . .	L Near	 00000074 _TEXT	
  found  . . . . . . . . . . . .	L Near	 000000F5 _TEXT	
  notFound . . . . . . . . . . .	L Near	 00000106 _TEXT	
  final  . . . . . . . . . . . .	L Near	 0000015B _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
searchInTree . . . . . . . . . .	P Near	 00000295 _TEXT	Length= 00000080 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  value  . . . . . . . . . . . .	DWord	 bp + 0000000C
  comeBack . . . . . . . . . . .	L Near	 000002CC _TEXT	
  traverseRightNode  . . . . . .	L Near	 000002F6 _TEXT	
  traverseLeftNode . . . . . . .	L Near	 00000301 _TEXT	
  found  . . . . . . . . . . . .	L Near	 0000030C _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000311 _TEXT	
traverseInOrder  . . . . . . . .	P Near	 00000223 _TEXT	Length= 00000072 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  print  . . . . . . . . . . . .	L Near	 0000024B _TEXT	
  traverseRightNode  . . . . . .	L Near	 00000281 _TEXT	
  traverseLeftNode . . . . . . .	L Near	 00000289 _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000291 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bst  . . . . . . . . . . . . . .	DWord	 000000F3 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
dividend . . . . . . . . . . . .	DWord	 00000038 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
foundString  . . . . . . . . . .	Byte	 0000009D _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxString  . . . . . . . . . . .	Byte	 000000CB _DATA	
maxValue . . . . . . . . . . . .	DWord	 00000040 _DATA	
minString  . . . . . . . . . . .	Byte	 000000E0 _DATA	
minValue . . . . . . . . . . . .	DWord	 00000044 _DATA	
multi  . . . . . . . . . . . . .	DWord	 00000034 _DATA	
nFoundString . . . . . . . . . .	Byte	 000000B2 _DATA	
p1 . . . . . . . . . . . . . . .	Byte	 00000048 _DATA	
p2 . . . . . . . . . . . . . . .	Byte	 0000005C _DATA	
p3 . . . . . . . . . . . . . . .	Byte	 0000007C _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
tempIndex  . . . . . . . . . . .	DWord	 0000003C _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
