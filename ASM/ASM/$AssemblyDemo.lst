Microsoft (R) Macro Assembler Version 14.00.23506.0	    11/18/19 19:31:04
BST.asm							     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				traverseInOrder proto , rootNode : ptr dword
				searchInTree proto , rootNode : ptr dword , value : dword
				deleteNode proto , rootNode: ptr dword , value : dword
				preOrder proto ,preNode : ptr dword , currentNode : ptr dowrd
				findMax proto , rootNode : ptr dword
				findMin proto , rootNode : ptr dword

 00000000			.data

 00000000 00000004		multi dword 4
 00000004 00000004		dividend dword 4
 00000008 00000000		tempIndex dword ?
 0000000C 00000000		maxValue dword 0
 00000010 00000000		minValue dword 0
 00000014 00000000		minValueNode dword ?
 00000018 00000000		maxValueNode dword ?
 0000001C 49 6E 73 65 72	p1 byte "Inserting values : ",0
	   74 69 6E 67 20
	   76 61 6C 75 65
	   73 20 3A 20 00
 00000030 54 72 61 76 65	p2 byte "Traversing binray Tree in order",0
	   72 73 69 6E 67
	   20 62 69 6E 72
	   61 79 20 54 72
	   65 65 20 69 6E
	   20 6F 72 64 65
	   72 00
 00000050 45 6E 74 65 72	p3 byte "Enter value to search in tree : ",0
	   20 76 61 6C 75
	   65 20 74 6F 20
	   73 65 61 72 63
	   68 20 69 6E 20
	   74 72 65 65 20
	   3A 20 00
 00000071 56 61 6C 75 65	foundString byte "Value found in tree ",0
	   20 66 6F 75 6E
	   64 20 69 6E 20
	   74 72 65 65 20
	   00
 00000086 56 61 6C 75 65	nFoundString byte "Value not found in tree ",0
	   20 6E 6F 74 20
	   66 6F 75 6E 64
	   20 69 6E 20 74
	   72 65 65 20 00
 0000009F 4D 61 78 20 76	maxString byte "Max value in tree : ",0
	   61 6C 75 65 20
	   69 6E 20 74 72
	   65 65 20 3A 20
	   00
 000000B4 4D 69 6E 20 76	minString byte "Min value in tree ",0
	   61 6C 75 65 20
	   69 6E 20 74 72
	   65 65 20 00
 000000C7 56 61 6C 75 65	deleteString byte "Value has been deleted",0
	   20 68 61 73 20
	   62 65 65 6E 20
	   64 65 6C 65 74
	   65 64 00
 000000DE 56 61 6C 75 65	notdelString byte "Value not find ",0
	   20 6E 6F 74 20
	   66 69 6E 64 20
	   00
 000000EE  00002710 [		bst sdword 10000 dup(0)
	    00000000
	   ]

 00000000			.code

 00000000			main PROC

 00000000			choice:
 00000000  E8 00000000 E	call clrscr
				mwriteln "        ---------------------------------------------------------------------------------------------------"
 00009D2E		     2		.data		
 00009D2E 20 20 20 20 20     2		??0000 BYTE "        ---------------------------------------------------------------------------------------------------",0	
	   20 20 20 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00
 00000005		     2		.code
 00000005  52		     2		push	edx
 00000006  BA 00009D2E R     2		mov	edx,OFFSET ??0000
 0000000B  E8 00000000 E     2		call	WriteString
 00000010  5A		     2		pop	edx
 00000011  E8 00000000 E     1		call	Crlf
				mwriteln "        ---------------------------------------Binary Search Tree------------------------------------------"
 00009D9A		     2		.data		
 00009D9A 20 20 20 20 20     2		??0001 BYTE "        ---------------------------------------Binary Search Tree------------------------------------------",0	
	   20 20 20 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 42 69 6E
	   61 72 79 20 53
	   65 61 72 63 68
	   20 54 72 65 65
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00
 00000016		     2		.code
 00000016  52		     2		push	edx
 00000017  BA 00009D9A R     2		mov	edx,OFFSET ??0001
 0000001C  E8 00000000 E     2		call	WriteString
 00000021  5A		     2		pop	edx
 00000022  E8 00000000 E     1		call	Crlf
				mwriteln "        ---------------------------------------------------------------------------------------------------"
 00009E06		     2		.data		
 00009E06 20 20 20 20 20     2		??0002 BYTE "        ---------------------------------------------------------------------------------------------------",0	
	   20 20 20 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00
 00000027		     2		.code
 00000027  52		     2		push	edx
 00000028  BA 00009E06 R     2		mov	edx,OFFSET ??0002
 0000002D  E8 00000000 E     2		call	WriteString
 00000032  5A		     2		pop	edx
 00000033  E8 00000000 E     1		call	Crlf
 00000038  E8 00000000 E	call crlf
				mwriteln "1 - Insert into tree "
 00009E72		     2		.data		
 00009E72 31 20 2D 20 49     2		??0003 BYTE "1 - Insert into tree ",0	
	   6E 73 65 72 74
	   20 69 6E 74 6F
	   20 74 72 65 65
	   20 00
 0000003D		     2		.code
 0000003D  52		     2		push	edx
 0000003E  BA 00009E72 R     2		mov	edx,OFFSET ??0003
 00000043  E8 00000000 E     2		call	WriteString
 00000048  5A		     2		pop	edx
 00000049  E8 00000000 E     1		call	Crlf
				mwriteln "2 - Traverse tree "
 00009E88		     2		.data		
 00009E88 32 20 2D 20 54     2		??0004 BYTE "2 - Traverse tree ",0	
	   72 61 76 65 72
	   73 65 20 74 72
	   65 65 20 00
 0000004E		     2		.code
 0000004E  52		     2		push	edx
 0000004F  BA 00009E88 R     2		mov	edx,OFFSET ??0004
 00000054  E8 00000000 E     2		call	WriteString
 00000059  5A		     2		pop	edx
 0000005A  E8 00000000 E     1		call	Crlf
				mwriteln "3 - Search into tree "
 00009E9B		     2		.data		
 00009E9B 33 20 2D 20 53     2		??0005 BYTE "3 - Search into tree ",0	
	   65 61 72 63 68
	   20 69 6E 74 6F
	   20 74 72 65 65
	   20 00
 0000005F		     2		.code
 0000005F  52		     2		push	edx
 00000060  BA 00009E9B R     2		mov	edx,OFFSET ??0005
 00000065  E8 00000000 E     2		call	WriteString
 0000006A  5A		     2		pop	edx
 0000006B  E8 00000000 E     1		call	Crlf
				mwriteln "4 - Delete from tree "
 00009EB1		     2		.data		
 00009EB1 34 20 2D 20 44     2		??0006 BYTE "4 - Delete from tree ",0	
	   65 6C 65 74 65
	   20 66 72 6F 6D
	   20 74 72 65 65
	   20 00
 00000070		     2		.code
 00000070  52		     2		push	edx
 00000071  BA 00009EB1 R     2		mov	edx,OFFSET ??0006
 00000076  E8 00000000 E     2		call	WriteString
 0000007B  5A		     2		pop	edx
 0000007C  E8 00000000 E     1		call	Crlf
				mwriteln "5 - Find maximum value in tree "
 00009EC7		     2		.data		
 00009EC7 35 20 2D 20 46     2		??0007 BYTE "5 - Find maximum value in tree ",0	
	   69 6E 64 20 6D
	   61 78 69 6D 75
	   6D 20 76 61 6C
	   75 65 20 69 6E
	   20 74 72 65 65
	   20 00
 00000081		     2		.code
 00000081  52		     2		push	edx
 00000082  BA 00009EC7 R     2		mov	edx,OFFSET ??0007
 00000087  E8 00000000 E     2		call	WriteString
 0000008C  5A		     2		pop	edx
 0000008D  E8 00000000 E     1		call	Crlf
				mwriteln "6 - Find minimum value in tree "
 00009EE7		     2		.data		
 00009EE7 36 20 2D 20 46     2		??0008 BYTE "6 - Find minimum value in tree ",0	
	   69 6E 64 20 6D
	   69 6E 69 6D 75
	   6D 20 76 61 6C
	   75 65 20 69 6E
	   20 74 72 65 65
	   20 00
 00000092		     2		.code
 00000092  52		     2		push	edx
 00000093  BA 00009EE7 R     2		mov	edx,OFFSET ??0008
 00000098  E8 00000000 E     2		call	WriteString
 0000009D  5A		     2		pop	edx
 0000009E  E8 00000000 E     1		call	Crlf
				mwriteln "7 - End program"
 00009F07		     2		.data		
 00009F07 37 20 2D 20 45     2		??0009 BYTE "7 - End program",0	
	   6E 64 20 70 72
	   6F 67 72 61 6D
	   00
 000000A3		     2		.code
 000000A3  52		     2		push	edx
 000000A4  BA 00009F07 R     2		mov	edx,OFFSET ??0009
 000000A9  E8 00000000 E     2		call	WriteString
 000000AE  5A		     2		pop	edx
 000000AF  E8 00000000 E     1		call	Crlf
 000000B4  E8 00000000 E	call readInt
 000000B9  83 F8 01		cmp eax , 1
 000000BC  74 51		je insertIntoTree
 000000BE  83 F8 02		cmp eax , 2
 000000C1  0F 84 000000C8	je traverseIntoTree
 000000C7  83 F8 03		cmp eax , 3
 000000CA  0F 84 00000100	je search
 000000D0  83 F8 04		cmp eax , 4
 000000D3  0F 84 000001C9	je deleteFromTree
 000000D9  83 F8 05		cmp eax , 5
 000000DC  0F 84 0000015C	je maxValueIntoTree
 000000E2  83 F8 06		cmp eax , 6
 000000E5  0F 84 00000185	je minValueIntoTree
 000000EB  83 F8 07		cmp eax , 7
 000000EE  0F 84 000001DE	je endProgram


 000000F4			wrongChoice:

				mwriteln "Enter correct choice "
 00009F17		     2		.data		
 00009F17 45 6E 74 65 72     2		??000A BYTE "Enter correct choice ",0	
	   20 63 6F 72 72
	   65 63 74 20 63
	   68 6F 69 63 65
	   20 00
 000000F4		     2		.code
 000000F4  52		     2		push	edx
 000000F5  BA 00009F17 R     2		mov	edx,OFFSET ??000A
 000000FA  E8 00000000 E     2		call	WriteString
 000000FF  5A		     2		pop	edx
 00000100  E8 00000000 E     1		call	Crlf
 00000105  E8 00000000 E	call waitMsg
 0000010A  E9 FFFFFEF1		jmp choice

 0000010F			insertIntoTree:
				;<---------------------------------insert into tree------------------------->
 0000010F  E8 00000000 E	call clrscr
 00000114  BA 00000004		mov edx , 4
 00000119  B8 00000000		mov eax , 0
 0000011E  BB 00000000		mov ebx , 0
 00000123  B9 00000000		mov ecx , 0
 00000128  C7 05 000000EE R	mov [bst] , 5
	   00000005
 00000132  BF 000000EE R	mov edi , offset bst
				mwriteln "How many elements you want to insert: "
 00009F2D		     2		.data		
 00009F2D 48 6F 77 20 6D     2		??000B BYTE "How many elements you want to insert: ",0	
	   61 6E 79 20 65
	   6C 65 6D 65 6E
	   74 73 20 79 6F
	   75 20 77 61 6E
	   74 20 74 6F 20
	   69 6E 73 65 72
	   74 3A 20 00
 00000137		     2		.code
 00000137  52		     2		push	edx
 00000138  BA 00009F2D R     2		mov	edx,OFFSET ??000B
 0000013D  E8 00000000 E     2		call	WriteString
 00000142  5A		     2		pop	edx
 00000143  E8 00000000 E     1		call	Crlf
 00000148  E8 00000000 E	call readInt
 0000014D  8B C8		mov ecx , eax
				mwriteln "Enter elements "
 00009F54		     2		.data		
 00009F54 45 6E 74 65 72     2		??000C BYTE "Enter elements ",0	
	   20 65 6C 65 6D
	   65 6E 74 73 20
	   00
 0000014F		     2		.code
 0000014F  52		     2		push	edx
 00000150  BA 00009F54 R     2		mov	edx,OFFSET ??000C
 00000155  E8 00000000 E     2		call	WriteString
 0000015A  5A		     2		pop	edx
 0000015B  E8 00000000 E     1		call	Crlf
 00000160			l1:
 00000160  E8 00000000 E	call readDec
 00000165  8B D8		mov ebx , eax
 00000167  68 000000F2 R	push offset [bst + 4]
 0000016C  68 000000F6 R	push offset [bst + 8]

 00000171  E8 00000174		call insert

 00000176  83 C4 08		add esp , 8
 00000179  BF 000000EE R	mov edi , offset bst

 0000017E  E2 E0		loop l1

 00000180  E8 00000000 E	call crlf

 00000185  E8 00000000 E	call waitMsg
 0000018A  E9 FFFFFE71		jmp choice

 0000018F			traverseIntoTree:
				;<-----------------------------------Traverse into tree------------------------------------->
 0000018F  E8 00000000 E	call clrscr
 00000194  BA 00000030 R	mov edx , offset p2
 00000199  E8 00000000 E	call writeString
 0000019E  E8 00000000 E	call crlf

 000001A3  BA 00000000		mov edx , 0
 000001A8  B8 00000000		mov eax , 0
 000001AD  BB 00000000		mov ebx , 0
 000001B2  B9 00000000		mov ecx , 0

 000001B7  BE 000000EE R	mov esi , offset bst
				invoke traverseInOrder , addr bst

 000001C6  E8 00000000 E	call waitMsg
 000001CB  E9 FFFFFE30		jmp choice
 000001D0			search:
				;<-----------------------------------Search into tree------------------------------------->
 000001D0  E8 00000000 E	call clrscr
				mwriteln "Enter value : "
 00009F64		     2		.data		
 00009F64 45 6E 74 65 72     2		??000D BYTE "Enter value : ",0	
	   20 76 61 6C 75
	   65 20 3A 20 00
 000001D5		     2		.code
 000001D5  52		     2		push	edx
 000001D6  BA 00009F64 R     2		mov	edx,OFFSET ??000D
 000001DB  E8 00000000 E     2		call	WriteString
 000001E0  5A		     2		pop	edx
 000001E1  E8 00000000 E     1		call	Crlf
 000001E6  E8 00000000 E	call readInt
 000001EB  BA 00000000		mov edx , 0
 000001F0  BB 00000000		mov ebx , 0
 000001F5  B9 00000000		mov ecx , 0

				invoke searchInTree , offset bst , eax

 00000205  83 F9 00		cmp ecx , 0
 00000208  74 02		je found
 0000020A  EB 19		jmp notFound

 0000020C			found:
 0000020C  BA 00000071 R	mov edx , offset foundString
 00000211  E8 00000000 E	call writeString
 00000216  E8 00000000 E	call crlf

 0000021B  E8 00000000 E	call waitMsg
 00000220  E9 FFFFFDDB		jmp choice

 00000225			notFound:
 00000225  BA 00000086 R	mov edx , offset nFoundString
 0000022A  E8 00000000 E	call writeString
 0000022F  E8 00000000 E	call crlf

 00000234  E8 00000000 E	call waitMsg
 00000239  E9 FFFFFDC2		jmp choice

 0000023E			maxValueIntoTree:
				;<-----------------------------------Max in tree------------------------------------->
 0000023E  E8 00000000 E	call clrscr
				invoke findMax , offset bst
 0000024D  BA 0000009F R	mov edx , offset maxString
 00000252  E8 00000000 E	call writeString
 00000257  A1 0000000C R	mov eax , maxValue
 0000025C  E8 00000000 E	call writeDec
 00000261  E8 00000000 E	call crlf

 00000266  E8 00000000 E	call waitMsg
 0000026B  E9 FFFFFD90		jmp choice
 00000270			minValueIntoTree:
				;<-----------------------------------Min in tree------------------------------------->
 00000270  E8 00000000 E	call clrscr
				invoke findMin , offset bst
 0000027F  BA 000000B4 R	mov edx , offset minString
 00000284  E8 00000000 E	call writeString
 00000289  A1 00000010 R	mov eax , minValue
 0000028E  E8 00000000 E	call writeDec
 00000293  E8 00000000 E	call crlf

 00000298  E8 00000000 E	call waitMsg
 0000029D  E9 FFFFFD5E		jmp choice

 000002A2			deleteFromTree:
				;<-----------------------------------Delete from tree------------------------------------->
 000002A2  E8 00000000 E	call clrscr
				mwriteln "Enter value to delete : "
 00009F73		     2		.data		
 00009F73 45 6E 74 65 72     2		??000E BYTE "Enter value to delete : ",0	
	   20 76 61 6C 75
	   65 20 74 6F 20
	   64 65 6C 65 74
	   65 20 3A 20 00
 000002A7		     2		.code
 000002A7  52		     2		push	edx
 000002A8  BA 00009F73 R     2		mov	edx,OFFSET ??000E
 000002AD  E8 00000000 E     2		call	WriteString
 000002B2  5A		     2		pop	edx
 000002B3  E8 00000000 E     1		call	Crlf
 000002B8  E8 00000000 E	call readInt
				invoke deleteNode , offset bst , eax


 000002C8  E8 00000000 E	call waitMsg
 000002CD  E9 FFFFFD2E		jmp choice


 000002D2			endProgram:
				mwriteln "......................End Program....................."
 00009F8C		     2		.data		
 00009F8C 2E 2E 2E 2E 2E     2		??000F BYTE "......................End Program.....................",0	
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 45 6E 64
	   20 50 72 6F 67
	   72 61 6D 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 00
 000002D2		     2		.code
 000002D2  52		     2		push	edx
 000002D3  BA 00009F8C R     2		mov	edx,OFFSET ??000F
 000002D8  E8 00000000 E     2		call	WriteString
 000002DD  5A		     2		pop	edx
 000002DE  E8 00000000 E     1		call	Crlf
				exit

 000002EA			main endp
				;//////////////////////////////////////////////// Insert Function //////////////////////////////////////////
 000002EA			insert proc

 000002EA  55			push ebp
 000002EB  8B EC		mov ebp , esp

 000002ED  3B 1F		cmp ebx , [edi]
 000002EF  74 70		je final

 000002F1  8B 07		mov eax , [edi]

 000002F3  3B D8		cmp  ebx , eax
 000002F5  72 02		jb leftNode
 000002F7  EB 31		jmp rightNode

 000002F9			leftNode:
 000002F9  8B 45 0C		mov eax, [ebp + 12]
 000002FC  8B 00		mov eax , [eax]
 000002FE  83 F8 00		cmp eax , 0
 00000301  74 1E		je assignValueAtLeft

 00000303  8B 45 0C		mov eax , [ebp + 12]
 00000306  8B F8		mov edi , eax
 00000308  2D 000000EE R	sub eax , offset bst

 0000030D  8B 75 0C		mov esi , [ebp + 12]
 00000310  03 F0		add esi , eax 

 00000312  83 C6 04		add esi , 4
 00000315  56			push esi
 00000316  83 C6 04		add esi , 4
 00000319  56			push esi

 0000031A  E8 FFFFFFCB		call insert 
 0000031F  EB 40		jmp final

 00000321			assignValueAtLeft:
 00000321  8B 75 0C		mov esi , [ebp + 12]
 00000324  89 1E		mov [esi] , ebx
 00000326  8B 06		mov eax , [esi]

 00000328  EB 37		jmp final

 0000032A			rightNode:
 0000032A  8B 45 08		mov eax, [ebp + 8]
 0000032D  8B 00		mov eax , [eax]
 0000032F  83 F8 00		cmp eax , 0
 00000332  74 1E		je assignValueAtRight
 00000334  8B 45 08		mov eax , [ebp + 8]
 00000337  8B F8		mov edi , eax
 00000339  2D 000000EE R	sub eax , offset bst

 0000033E  8B 75 08		mov esi , [ebp + 8]
 00000341  03 F0		add esi , eax 

 00000343  83 C6 04		add esi , 4
 00000346  56			push esi
 00000347  83 C6 04		add esi , 4
 0000034A  56			push esi

 0000034B  E8 FFFFFF9A		call insert
 00000350  EB 0F		jmp final

 00000352			assignValueAtRight:
 00000352  8B 75 08		mov esi , [ebp + 8]
 00000355  89 1E		mov [esi] , ebx
 00000357  8B 06		mov eax , [esi]
 00000359  EB 06		jmp final

 0000035B			assigValueAtRoot:
 0000035B  89 1F		mov [edi] , ebx
 0000035D  8B 07		mov eax , [edi]
 0000035F  EB 00		jmp final

 00000361			final:

 00000361  8B E5		mov esp , ebp
 00000363  5D			pop ebp 

 00000364  C2 0008		ret 8

 00000367			insert endp
				;///////////////////////////////////////////////// Traverse Function ///////////////////////////////////////
 00000367			traverseInOrder proc , rootNode : ptr dword

 0000036A  8B 45 08		mov eax , rootNode
 0000036D  8B 5D 08		mov ebx , rootNode
 00000370  2B C6		sub eax , esi
 00000372  03 D8		add ebx , eax
 00000374  83 C3 04		add ebx , 4
 00000377  8B 03		mov eax , [ebx]

 00000379  83 F8 00		cmp eax , 0
 0000037C  75 2D		jne traverseLeftNode

 0000037E			print:
 0000037E  8B 45 08		mov eax , [rootNode]
 00000381  8B 00		mov eax , [eax]
 00000383  E8 00000000 E	call writeDec
 00000388  E8 00000000 E	call crlf

 0000038D  8B 45 08		mov eax , rootNode
 00000390  8B 5D 08		mov ebx , rootNode
 00000393  2B C6		sub eax , esi
 00000395  03 D8		add ebx , eax
 00000397  83 C3 08		add ebx , 8
 0000039A  8B 03		mov eax , [ebx]

 0000039C  83 F8 00		cmp eax , 0
 0000039F  75 02		jne traverseRightNode
 000003A1  EB 10		jmp final

 000003A3			traverseRightNode:
				invoke traverseInOrder , ebx
 000003A9  EB 08		jmp final

 000003AB			traverseLeftNode:
				invoke traverseInOrder , ebx
 000003B1  EB CB		jmp print

 000003B3			final:
				ret
 000003B7			traverseInOrder endp
				;////////////////////////////////////////// Search Function ////////////////////////////////////////////

 000003B7			searchInTree proc , rootNode : ptr dword , value : dword

 000003BA  8B 45 08		mov eax , [rootNode]
 000003BD  8B 00		mov eax , [eax]
 000003BF  8B 55 0C		mov edx , value
 000003C2  3B C2		cmp eax , edx
 000003C4  74 46		je found

 000003C6  8B 45 08		mov eax , rootNode
 000003C9  8B 5D 08		mov ebx , rootNode
 000003CC  2D 000000EE R	sub eax , offset bst
 000003D1  03 D8		add ebx , eax
 000003D3  83 C3 04		add ebx , 4
 000003D6  8B 03		mov eax , [ebx]

 000003D8  83 F8 00		cmp eax , 0
 000003DB  75 24		jne traverseLeftNode

 000003DD			comeBack:
 000003DD  8B 45 08		mov eax , rootNode
 000003E0  8B 5D 08		mov ebx , rootNode
 000003E3  2D 000000EE R	sub eax , offset bst
 000003E8  03 D8		add ebx , eax
 000003EA  83 C3 08		add ebx , 8
 000003ED  8B 03		mov eax , [ebx]

 000003EF  83 F8 00		cmp eax , 0
 000003F2  75 02		jne traverseRightNode
 000003F4  EB 1B		jmp final

 000003F6			traverseRightNode:
				invoke searchInTree , ebx , value
 000003FF  EB 10		jmp final

 00000401			traverseLeftNode:
				invoke searchInTree , ebx , value
 0000040A  EB D1		jmp comeBack

 0000040C			found:
 0000040C  B9 00000001		mov ecx , 1

 00000411			final:
				ret

 00000415			searchInTree endp
				;///////////////////////////////////// Max Function ///////////////////////////////////////////
 00000415			findMax proc , rootNode : ptr dword

 00000418  8B 45 08		mov eax , rootNode
 0000041B  8B 5D 08		mov ebx , rootNode
 0000041E  2D 000000EE R	sub eax , offset bst
 00000423  03 D8		add ebx , eax
 00000425  83 C3 08		add ebx , 8
 00000428  8B 03		mov eax , [ebx]

 0000042A  83 F8 00		cmp eax , 0
 0000042D  75 02		jne traverseRightNode
 0000042F  EB 08		jmp foundMaxValue

 00000431			traverseRightNode:
				invoke findMax , ebx 
 00000437  EB 0F		jmp final

 00000439			foundMaxValue:
 00000439  8B 45 08		mov eax , [rootNode]
 0000043C  A3 00000018 R	mov maxValueNode , eax
 00000441  8B 00		mov eax , [eax]
 00000443  A3 0000000C R	mov MaxValue , eax

 00000448			final:
				ret
 0000044C			findMax endp
				;///////////////////////////////////// Min Function ///////////////////////////////////////////
 0000044C			findMin proc , rootNode : ptr dword

 0000044F  8B 45 08		mov eax , rootNode
 00000452  8B 5D 08		mov ebx , rootNode
 00000455  2D 000000EE R	sub eax , offset bst
 0000045A  03 D8		add ebx , eax
 0000045C  83 C3 04		add ebx , 4
 0000045F  8B 03		mov eax , [ebx]

 00000461  83 F8 00		cmp eax , 0
 00000464  75 02		jne traverseLeftNode
 00000466  EB 08		jmp foundMaxValue

 00000468			traverseLeftNode:
				invoke findMin , ebx 
 0000046E  EB 0F		jmp final

 00000470			foundMaxValue:
 00000470  8B 45 08		mov eax , [rootNode]
 00000473  A3 00000014 R	mov minValueNode , eax
 00000478  8B 00		mov eax , [eax]
 0000047A  A3 00000010 R	mov minValue , eax

 0000047F			final:
				ret
 00000483			findMin endp
				;///////////////////////////////////// Delete Function ///////////////////////////////////////////
 00000483			deleteNode proc , rootNode: ptr dword , value : dword

 00000486  8B 55 0C		mov edx , value 
 00000489  B9 00000000		mov ecx , 0
 0000048E			l1:

 0000048E  8B 5D 08		mov ebx , rootNode
 00000491  8B 1B		mov ebx , [ebx]

 00000493  3B DA		cmp ebx , edx
 00000495  74 35		je breakLoop
 00000497  83 FB 00		cmp ebx , 0
 0000049A  74 30		je breakLoop

 0000049C  3B D3		cmp edx , ebx
 0000049E  72 02		jb traverseLeft
 000004A0  EB 14		jmp traverseRight

 000004A2			traverseLeft:

 000004A2  8B 45 08		mov eax , rootNode
 000004A5  8B F0		mov esi , eax
 000004A7  2D 000000EE R	sub eax , offset bst
 000004AC  03 F0		add esi , eax
 000004AE  83 C6 04		add esi , 4
 000004B1  89 75 08		mov rootNode , esi
 000004B4  EB 14		jmp fina1_1

 000004B6			traverseRight:
 000004B6  8B 45 08		mov eax , rootNode
 000004B9  8B F0		mov esi , eax
 000004BB  2D 000000EE R	sub eax , offset bst
 000004C0  03 F0		add esi , eax
 000004C2  83 C6 08		add esi , 8
 000004C5  89 75 08		mov rootNode , esi
 000004C8  EB 00		jmp fina1_1

 000004CA			fina1_1:

 000004CA  E2 C2		loop l1

 000004CC			breakLoop:

 000004CC  8B 5D 08		mov ebx , rootNode
 000004CF  8B 1B		mov ebx , [ebx]

 000004D1  83 FB 00		cmp ebx , 0
 000004D4  0F 84 000000E6	je valueNotFound

 000004DA  8B 45 08		mov eax , rootNode
 000004DD  8B F0		mov esi , eax
 000004DF  2D 000000EE R	sub eax , offset bst
 000004E4  03 F0		add esi , eax
 000004E6  8B FE		mov edi , esi
 000004E8  83 C7 04		add edi , 4
 000004EB  83 C6 08		add esi , 8
				 
 000004EE  8B 0F		mov ecx , [edi]
 000004F0  83 F9 00		cmp ecx , 0
 000004F3  74 02		je case1 ; if left is null
 000004F5  EB 16		jmp case2 ; else case

 000004F7			case1:
 000004F7  8B 0E		mov ecx , [esi]
 000004F9  83 F9 00		cmp ecx , 0
 000004FC  75 0F		jne case2 ; if right is not null

 000004FE  B8 00000000		mov eax , 0
 00000503  8B 5D 08		mov ebx , rootNode
 00000506  89 03		mov [ebx] , eax
 00000508  E9 000000A2		jmp valueDeleted

 0000050D			case2:
 0000050D  8B 0E		mov ecx , [esi]
 0000050F  83 F9 00		cmp ecx , 0 
 00000512  75 02		jne deleteAtRight ; if right is not null
 00000514  EB 23		jmp deleteAtLeft ; if rght is null

 00000516			deleteAtRight:
 00000516  8B 0F		mov ecx , [edi]
 00000518  83 F9 00		cmp ecx , 0
 0000051B  75 38		jne case3

				invoke findMin , esi
 00000523  8B 35 00000014 R	mov esi , minValueNode
 00000529  8B 06		mov eax , [esi]
 0000052B  8B 5D 08		mov ebx , rootNode
 0000052E  89 03		mov [ebx] , eax
				invoke deleteNode , esi , eax
 00000537  EB 76		jmp valueDeleted

 00000539			deleteAtLeft:
				invoke findMax , edi
 0000053F  8B 3D 00000018 R	mov edi , maxValueNode
 00000545  8B 07		mov eax , [edi]
 00000547  8B 5D 08		mov ebx , rootNode
 0000054A  89 03		mov [ebx] , eax
				invoke deleteNode , edi , eax
 00000553  EB 5A		jmp valueDeleted

 00000555			case3:

 00000555  8B 45 08		mov eax , rootNode
 00000558  2D 000000EE R	sub eax , offset bst
 0000055D  03 45 08		add eax , rootNode
 00000560  83 C0 08		add eax , 8
 00000563  B9 00000000		mov ecx , 0
 00000568  8B 55 08		mov edx, rootNode
 0000056B			l2:

 0000056B  8B 18		mov ebx , [eax]
 0000056D  83 FB 00		cmp ebx , 0
 00000570  74 0E		je foundValue

 00000572  8B D0		mov edx, eax
 00000574  2D 000000EE R	sub eax , offset bst
 00000579  03 C2		add eax , edx
 0000057B  83 C0 04		add eax , 4

 0000057E  E2 EB		loop l2

 00000580			foundValue:
 00000580  8B 1A		mov ebx , [edx]
 00000582  8B 45 08		mov eax , rootNode
 00000585  89 18		mov [eax] , ebx

 00000587  8B C2		mov eax , edx
 00000589  81 EA 000000EE R	sub edx , offset bst
 0000058F  03 D0		add edx , eax
 00000591  83 C2 08		add edx , 8

 00000594  8B 1A		mov ebx , [edx]
 00000596  83 FB 00		cmp ebx , 0
 00000599  75 09		jne callAnotheFun

 0000059B  BB 00000000		mov ebx , 0
 000005A0  89 18		mov [eax] , ebx
 000005A2  EB 0B		jmp valueDeleted

 000005A4			callAnotheFun:

 000005A4  8B 18		mov ebx , [eax]
				invoke deleteNode , eax , ebx
 000005AD  EB 00		jmp valueDeleted

 000005AF			valueDeleted:
 000005AF  BA 000000C7 R	mov edx, offset deleteString
 000005B4  E8 00000000 E	call writeString
 000005B9  E8 00000000 E	call crlf
 000005BE  EB 0F		jmp final_2

 000005C0			valueNotFound:
 000005C0  BA 000000DE R	mov edx, offset notdelString
 000005C5  E8 00000000 E	call writeString
 000005CA  E8 00000000 E	call crlf

 000005CF			final_2:
				ret
 000005D3			deleteNode endp
				end main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    11/18/19 19:31:04
BST.asm							     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 00009FC3 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 000005D3 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
deleteNode . . . . . . . . . . .	P Near	 00000483 _TEXT	Length= 00000150 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  value  . . . . . . . . . . . .	DWord	 bp + 0000000C
  l1 . . . . . . . . . . . . . .	L Near	 0000048E _TEXT	
  traverseLeft . . . . . . . . .	L Near	 000004A2 _TEXT	
  traverseRight  . . . . . . . .	L Near	 000004B6 _TEXT	
  fina1_1  . . . . . . . . . . .	L Near	 000004CA _TEXT	
  breakLoop  . . . . . . . . . .	L Near	 000004CC _TEXT	
  case1  . . . . . . . . . . . .	L Near	 000004F7 _TEXT	
  case2  . . . . . . . . . . . .	L Near	 0000050D _TEXT	
  deleteAtRight  . . . . . . . .	L Near	 00000516 _TEXT	
  deleteAtLeft . . . . . . . . .	L Near	 00000539 _TEXT	
  case3  . . . . . . . . . . . .	L Near	 00000555 _TEXT	
  l2 . . . . . . . . . . . . . .	L Near	 0000056B _TEXT	
  foundValue . . . . . . . . . .	L Near	 00000580 _TEXT	
  callAnotheFun  . . . . . . . .	L Near	 000005A4 _TEXT	
  valueDeleted . . . . . . . . .	L Near	 000005AF _TEXT	
  valueNotFound  . . . . . . . .	L Near	 000005C0 _TEXT	
  final_2  . . . . . . . . . . .	L Near	 000005CF _TEXT	
findMax  . . . . . . . . . . . .	P Near	 00000415 _TEXT	Length= 00000037 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  traverseRightNode  . . . . . .	L Near	 00000431 _TEXT	
  foundMaxValue  . . . . . . . .	L Near	 00000439 _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000448 _TEXT	
findMin  . . . . . . . . . . . .	P Near	 0000044C _TEXT	Length= 00000037 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  traverseLeftNode . . . . . . .	L Near	 00000468 _TEXT	
  foundMaxValue  . . . . . . . .	L Near	 00000470 _TEXT	
  final  . . . . . . . . . . . .	L Near	 0000047F _TEXT	
insert . . . . . . . . . . . . .	P Near	 000002EA _TEXT	Length= 0000007D Public STDCALL
  leftNode . . . . . . . . . . .	L Near	 000002F9 _TEXT	
  assignValueAtLeft  . . . . . .	L Near	 00000321 _TEXT	
  rightNode  . . . . . . . . . .	L Near	 0000032A _TEXT	
  assignValueAtRight . . . . . .	L Near	 00000352 _TEXT	
  assigValueAtRoot . . . . . . .	L Near	 0000035B _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000361 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000002EA Public STDCALL
  choice . . . . . . . . . . . .	L Near	 00000000 _TEXT	
  wrongChoice  . . . . . . . . .	L Near	 000000F4 _TEXT	
  insertIntoTree . . . . . . . .	L Near	 0000010F _TEXT	
  l1 . . . . . . . . . . . . . .	L Near	 00000160 _TEXT	
  traverseIntoTree . . . . . . .	L Near	 0000018F _TEXT	
  search . . . . . . . . . . . .	L Near	 000001D0 _TEXT	
  found  . . . . . . . . . . . .	L Near	 0000020C _TEXT	
  notFound . . . . . . . . . . .	L Near	 00000225 _TEXT	
  maxValueIntoTree . . . . . . .	L Near	 0000023E _TEXT	
  minValueIntoTree . . . . . . .	L Near	 00000270 _TEXT	
  deleteFromTree . . . . . . . .	L Near	 000002A2 _TEXT	
  endProgram . . . . . . . . . .	L Near	 000002D2 _TEXT	
preOrder . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
searchInTree . . . . . . . . . .	P Near	 000003B7 _TEXT	Length= 0000005E Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  value  . . . . . . . . . . . .	DWord	 bp + 0000000C
  comeBack . . . . . . . . . . .	L Near	 000003DD _TEXT	
  traverseRightNode  . . . . . .	L Near	 000003F6 _TEXT	
  traverseLeftNode . . . . . . .	L Near	 00000401 _TEXT	
  found  . . . . . . . . . . . .	L Near	 0000040C _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000411 _TEXT	
traverseInOrder  . . . . . . . .	P Near	 00000367 _TEXT	Length= 00000050 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  print  . . . . . . . . . . . .	L Near	 0000037E _TEXT	
  traverseRightNode  . . . . . .	L Near	 000003A3 _TEXT	
  traverseLeftNode . . . . . . .	L Near	 000003AB _TEXT	
  final  . . . . . . . . . . . .	L Near	 000003B3 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00009D2E _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00009D9A _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00009E06 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00009E72 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00009E88 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00009E9B _DATA	
??0006 . . . . . . . . . . . . .	Byte	 00009EB1 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00009EC7 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00009EE7 _DATA	
??0009 . . . . . . . . . . . . .	Byte	 00009F07 _DATA	
??000A . . . . . . . . . . . . .	Byte	 00009F17 _DATA	
??000B . . . . . . . . . . . . .	Byte	 00009F2D _DATA	
??000C . . . . . . . . . . . . .	Byte	 00009F54 _DATA	
??000D . . . . . . . . . . . . .	Byte	 00009F64 _DATA	
??000E . . . . . . . . . . . . .	Byte	 00009F73 _DATA	
??000F . . . . . . . . . . . . .	Byte	 00009F8C _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bst  . . . . . . . . . . . . . .	DWord	 000000EE _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
deleteString . . . . . . . . . .	Byte	 000000C7 _DATA	
dividend . . . . . . . . . . . .	DWord	 00000004 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
foundString  . . . . . . . . . .	Byte	 00000071 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxString  . . . . . . . . . . .	Byte	 0000009F _DATA	
maxValueNode . . . . . . . . . .	DWord	 00000018 _DATA	
maxValue . . . . . . . . . . . .	DWord	 0000000C _DATA	
minString  . . . . . . . . . . .	Byte	 000000B4 _DATA	
minValueNode . . . . . . . . . .	DWord	 00000014 _DATA	
minValue . . . . . . . . . . . .	DWord	 00000010 _DATA	
multi  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
nFoundString . . . . . . . . . .	Byte	 00000086 _DATA	
notdelString . . . . . . . . . .	Byte	 000000DE _DATA	
p1 . . . . . . . . . . . . . . .	Byte	 0000001C _DATA	
p2 . . . . . . . . . . . . . . .	Byte	 00000030 _DATA	
p3 . . . . . . . . . . . . . . .	Byte	 00000050 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
tempIndex  . . . . . . . . . . .	DWord	 00000008 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
