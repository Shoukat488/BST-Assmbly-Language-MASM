Microsoft (R) Macro Assembler Version 14.00.23506.0	    11/17/19 22:10:50
BST.asm							     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				traverseInOrder proto , rootNode : ptr dword
				searchInTree proto , rootNode : ptr dword , value : dword
				deleteNode proto , rootNode: ptr dword , value : dword
				preOrder proto ,preNode : ptr dword , currentNode : ptr dowrd
				findMax proto , rootNode : ptr dword
				findMin proto , rootNode : ptr dword
 00000000			.data
 00000000 00000005		array dword 5,4,8,6,7,10,2,3,11,14,13,12,26,9,15
	   00000004
	   00000008
	   00000006
	   00000007
	   0000000A
	   00000002
	   00000003
	   0000000B
	   0000000E
	   0000000D
	   0000000C
	   0000001A
	   00000009
	   0000000F
 0000003C 00000004		multi dword 4
 00000040 00000004		dividend dword 4
 00000044 00000000		tempIndex dword ?
 00000048 00000001		maxValue dword 1
 0000004C 00000001		minValue dword 1
 00000050 49 6E 73 65 72	p1 byte "Inserting values : ",0
	   74 69 6E 67 20
	   76 61 6C 75 65
	   73 20 3A 20 00
 00000064 54 72 61 76 65	p2 byte "Traversing binray Tree in order",0
	   72 73 69 6E 67
	   20 62 69 6E 72
	   61 79 20 54 72
	   65 65 20 69 6E
	   20 6F 72 64 65
	   72 00
 00000084 45 6E 74 65 72	p3 byte "Enter value to search in tree : ",0
	   20 76 61 6C 75
	   65 20 74 6F 20
	   73 65 61 72 63
	   68 20 69 6E 20
	   74 72 65 65 20
	   3A 20 00
 000000A5 56 61 6C 75 65	foundString byte "Value found in tree ",0
	   20 66 6F 75 6E
	   64 20 69 6E 20
	   74 72 65 65 20
	   00
 000000BA 56 61 6C 75 65	nFoundString byte "Value not found in tree ",0
	   20 6E 6F 74 20
	   66 6F 75 6E 64
	   20 69 6E 20 74
	   72 65 65 20 00
 000000D3 4D 61 78 20 76	maxString byte "Max value in tree : ",0
	   61 6C 75 65 20
	   69 6E 20 74 72
	   65 65 20 3A 20
	   00
 000000E8 4D 69 6E 20 76	minString byte "Min value in tree ",0
	   61 6C 75 65 20
	   69 6E 20 74 72
	   65 65 20 00
 000000FB 56 61 6C 75 65	deleteString byte "Value has been deleted",0
	   20 68 61 73 20
	   62 65 65 6E 20
	   64 65 6C 65 74
	   65 64 00
 00000112 56 61 6C 75 65	notdelString byte "Value not find ",0
	   20 6E 6F 74 20
	   66 69 6E 64 20
	   00
 00000122  000003E8 [		bst dword 1000 dup(1)
	    00000001
	   ]
 00000000			.code
 00000000			main PROC
				;-------------------------
 00000000  BA 00000050 R	mov edx , offset p1
 00000005  E8 00000000 E	call writeString
 0000000A  E8 00000000 E	call crlf
 0000000F  BA 00000004		mov edx , 4
 00000014  B8 00000000		mov eax , 0
 00000019  BB 00000000		mov ebx , 0
 0000001E  B9 00000000		mov ecx , 0
 00000023  C7 05 00000122 R	mov [bst] , 5
	   00000005
 0000002D  B9 0000000F		mov ecx, lengthof array
 00000032  BF 00000122 R	mov edi , offset bst


 00000037			l1:

 00000037  8B 9A 00000000 R	mov ebx, array[edx]
 0000003D  89 15 00000044 R	mov tempIndex , edx

 00000043  68 00000126 R	push offset [bst + 4]
 00000048  68 0000012A R	push offset [bst + 8]

 0000004D  E8 00000156		call insert

 00000052  83 C4 08		add esp , 8
 00000055  BF 00000122 R	mov edi , offset bst
 0000005A  8B 15 00000044 R	mov edx , tempIndex
 00000060  83 C2 04		add edx , 4

 00000063  E2 D2		loop l1

 00000065  E8 00000000 E	call crlf
 0000006A  B9 0000000F		mov ecx, 15
 0000006F  BE 00000000		mov esi, 0

 00000074			l4:

 00000074  8B 86 00000122 R	mov eax , bst[esi]
 0000007A  E8 00000000 E	call writeDec
 0000007F  E8 00000000 E	call crlf
 00000084  83 C6 04		add esi , 4
 00000087  E2 EB		loop l4
				;-----------------------------------
 00000089  E8 00000000 E	call crlf

 0000008E  BA 00000064 R	mov edx , offset p2
 00000093  E8 00000000 E	call writeString
 00000098  E8 00000000 E	call crlf

 0000009D  BA 00000000		mov edx , 0
 000000A2  B8 00000000		mov eax , 0
 000000A7  BB 00000000		mov ebx , 0
 000000AC  B9 00000000		mov ecx , 0

 000000B1  BE 00000122 R	mov esi , offset bst
				invoke traverseInOrder , addr bst


				;----------------------------------------------

 000000C0  BA 00000084 R	mov edx , offset p3
 000000C5  E8 00000000 E	call writestring
 000000CA  E8 00000000 E	call crlf
 000000CF  E8 00000000 E	call readInt
 000000D4  BA 00000000		mov edx , 0
 000000D9  BB 00000000		mov ebx , 0
 000000DE  B9 00000000		mov ecx , 0

				invoke searchInTree , offset bst , eax

 000000EE  83 F9 01		cmp ecx , 1
 000000F1  74 02		je found
 000000F3  EB 11		jmp notFound

 000000F5			found:
 000000F5  BA 000000A5 R	mov edx , offset foundString
 000000FA  E8 00000000 E	call writeString
 000000FF  E8 00000000 E	call crlf
 00000104  EB 11		jmp final1

 00000106			notFound:
 00000106  BA 000000BA R	mov edx , offset nFoundString
 0000010B  E8 00000000 E	call writeString
 00000110  E8 00000000 E	call crlf
 00000115  EB 00		jmp final1

 00000117			final1:
				;-------------------------------------------

				invoke findMax , offset bst
 00000121  BA 000000D3 R	mov edx , offset maxString
 00000126  E8 00000000 E	call writeString
 0000012B  A1 00000048 R	mov eax , maxValue
 00000130  E8 00000000 E	call writeDec
 00000135  E8 00000000 E	call crlf

				;-------------------------------------------

				invoke findMin , offset bst
 00000144  BA 000000E8 R	mov edx , offset minString
 00000149  E8 00000000 E	call writeString
 0000014E  A1 0000004C R	mov eax , minValue
 00000153  E8 00000000 E	call writeDec
 00000158  E8 00000000 E	call crlf

				;-------------------------------------------
				mwriteln "Enter value to delete : "
 000010C2		     2		.data		
 000010C2 45 6E 74 65 72     2		??0000 BYTE "Enter value to delete : ",0	
	   20 76 61 6C 75
	   65 20 74 6F 20
	   64 65 6C 65 74
	   65 20 3A 20 00
 0000015D		     2		.code
 0000015D  52		     2		push	edx
 0000015E  BA 000010C2 R     2		mov	edx,OFFSET ??0000
 00000163  E8 00000000 E     2		call	WriteString
 00000168  5A		     2		pop	edx
 00000169  E8 00000000 E     1		call	Crlf
 0000016E  E8 00000000 E	call readInt
				invoke deleteNode , offset bst , eax

				;-------------------------------------------

 0000017E  BA 00000000		mov edx , 0
 00000183  B8 00000000		mov eax , 0
 00000188  BB 00000000		mov ebx , 0
 0000018D  B9 00000000		mov ecx , 0

 00000192  BE 00000122 R	mov esi , offset bst
				invoke traverseInOrder , addr bst
				exit


 000001A8			main endp
				;//////////////////////////////////////////////// Insert Function //////////////////////////////////////////
 000001A8			insert proc

 000001A8  55			push ebp
 000001A9  8B EC		mov ebp , esp

 000001AB  3B 1F		cmp ebx , [edi]
 000001AD  0F 84 0000008E	je final

 000001B3  8B 07		mov eax , [edi]

 000001B5  3B D8		cmp  ebx , eax
 000001B7  72 02		jb leftNode
 000001B9  EB 3B		jmp rightNode

 000001BB			leftNode:
 000001BB  8B 45 0C		mov eax, [ebp + 12]
 000001BE  8B 00		mov eax , [eax]
 000001C0  83 F8 01		cmp eax , 1
 000001C3  74 1E		je assignValueAtLeft

 000001C5  8B 45 0C		mov eax , [ebp + 12]
 000001C8  8B F8		mov edi , eax
 000001CA  2D 00000122 R	sub eax , offset bst

 000001CF  8B 75 0C		mov esi , [ebp + 12]
 000001D2  03 F0		add esi , eax 

 000001D4  83 C6 04		add esi , 4
 000001D7  56			push esi
 000001D8  83 C6 04		add esi , 4
 000001DB  56			push esi

 000001DC  E8 FFFFFFC7		call insert 
 000001E1  EB 5E		jmp final

 000001E3			assignValueAtLeft:
 000001E3  8B 75 0C		mov esi , [ebp + 12]
 000001E6  89 1E		mov [esi] , ebx
 000001E8  8B 06		mov eax , [esi]
 000001EA  E8 00000000 E	call writeDec
 000001EF  E8 00000000 E	call crlf
 000001F4  EB 4B		jmp final

 000001F6			rightNode:
 000001F6  8B 45 08		mov eax, [ebp + 8]
 000001F9  8B 00		mov eax , [eax]
 000001FB  83 F8 01		cmp eax ,1
 000001FE  74 1E		je assignValueAtRight
 00000200  8B 45 08		mov eax , [ebp + 8]
 00000203  8B F8		mov edi , eax
 00000205  2D 00000122 R	sub eax , offset bst

 0000020A  8B 75 08		mov esi , [ebp + 8]
 0000020D  03 F0		add esi , eax 

 0000020F  83 C6 04		add esi , 4
 00000212  56			push esi
 00000213  83 C6 04		add esi , 4
 00000216  56			push esi

 00000217  E8 FFFFFF8C		call insert
 0000021C  EB 23		jmp final

 0000021E			assignValueAtRight:
 0000021E  8B 75 08		mov esi , [ebp + 8]
 00000221  89 1E		mov [esi] , ebx
 00000223  8B 06		mov eax , [esi]
 00000225  E8 00000000 E	call writeDec
 0000022A  E8 00000000 E	call crlf
 0000022F  EB 10		jmp final

 00000231			assigValueAtRoot:
 00000231  89 1F		mov [edi] , ebx
 00000233  8B 07		mov eax , [edi]
 00000235  E8 00000000 E	call writeDec
 0000023A  E8 00000000 E	call crlf
 0000023F  EB 00		jmp final

 00000241			final:

 00000241  8B E5		mov esp , ebp
 00000243  5D			pop ebp 

 00000244  C2 0008		ret 8

 00000247			insert endp
				;///////////////////////////////////////////////// Traverse Function ///////////////////////////////////////
 00000247			traverseInOrder proc , rootNode : ptr dword

 0000024A  8B 45 08		mov eax , rootNode
 0000024D  8B 5D 08		mov ebx , rootNode
 00000250  2B C6		sub eax , esi
 00000252  F7 25 0000003C R	mul multi
 00000258  BA 00000000		mov edx , 0
 0000025D  F7 35 00000040 R	div dividend
 00000263  03 D8		add ebx , eax
 00000265  83 C3 04		add ebx , 4
 00000268  8B 03		mov eax , [ebx]

 0000026A  83 F8 01		cmp eax , 1
 0000026D  75 3E		jne traverseLeftNode

 0000026F			print:
 0000026F  8B 45 08		mov eax , [rootNode]
 00000272  8B 00		mov eax , [eax]
 00000274  E8 00000000 E	call writeDec
 00000279  E8 00000000 E	call crlf

 0000027E  8B 45 08		mov eax , rootNode
 00000281  8B 5D 08		mov ebx , rootNode
 00000284  2B C6		sub eax , esi
 00000286  F7 25 0000003C R	mul multi
 0000028C  BA 00000000		mov edx , 0
 00000291  F7 35 00000040 R	div dividend
 00000297  03 D8		add ebx , eax
 00000299  83 C3 08		add ebx , 8
 0000029C  8B 03		mov eax , [ebx]

 0000029E  83 F8 01		cmp eax , 1
 000002A1  75 02		jne traverseRightNode
 000002A3  EB 10		jmp final

 000002A5			traverseRightNode:
				invoke traverseInOrder , ebx
 000002AB  EB 08		jmp final

 000002AD			traverseLeftNode:
				invoke traverseInOrder , ebx
 000002B3  EB BA		jmp print

 000002B5			final:
				ret
 000002B9			traverseInOrder endp
				;////////////////////////////////////////// Search Function ////////////////////////////////////////////

 000002B9			searchInTree proc , rootNode : ptr dword , value : dword

 000002BC  8B 45 08		mov eax , [rootNode]
 000002BF  8B 00		mov eax , [eax]
 000002C1  8B 55 0C		mov edx , value
 000002C4  3B C2		cmp eax , edx
 000002C6  74 68		je found

 000002C8  8B 45 08		mov eax , rootNode
 000002CB  8B 5D 08		mov ebx , rootNode
 000002CE  2D 00000122 R	sub eax , offset bst
 000002D3  F7 25 0000003C R	mul multi
 000002D9  BA 00000000		mov edx , 0
 000002DE  F7 35 00000040 R	div dividend
 000002E4  03 D8		add ebx , eax
 000002E6  83 C3 04		add ebx , 4
 000002E9  8B 03		mov eax , [ebx]

 000002EB  83 F8 01		cmp eax , 1
 000002EE  75 35		jne traverseLeftNode

 000002F0			comeBack:
 000002F0  8B 45 08		mov eax , rootNode
 000002F3  8B 5D 08		mov ebx , rootNode
 000002F6  2D 00000122 R	sub eax , offset bst
 000002FB  F7 25 0000003C R	mul multi
 00000301  BA 00000000		mov edx , 0
 00000306  F7 35 00000040 R	div dividend
 0000030C  03 D8		add ebx , eax
 0000030E  83 C3 08		add ebx , 8
 00000311  8B 03		mov eax , [ebx]

 00000313  83 F8 01		cmp eax , 1
 00000316  75 02		jne traverseRightNode
 00000318  EB 1B		jmp final

 0000031A			traverseRightNode:
				invoke searchInTree , ebx , value
 00000323  EB 10		jmp final

 00000325			traverseLeftNode:
				invoke searchInTree , ebx , value
 0000032E  EB C0		jmp comeBack

 00000330			found:
 00000330  B9 00000001		mov ecx , 1

 00000335			final:
				ret

 00000339			searchInTree endp
				;///////////////////////////////////// Max Function ///////////////////////////////////////////
 00000339			findMax proc , rootNode : ptr dword



 0000033C  8B 45 08		mov eax , rootNode
 0000033F  8B 5D 08		mov ebx , rootNode
 00000342  2D 00000122 R	sub eax , offset bst
 00000347  F7 25 0000003C R	mul multi
 0000034D  BA 00000000		mov edx , 0
 00000352  F7 35 00000040 R	div dividend
 00000358  03 D8		add ebx , eax
 0000035A  83 C3 08		add ebx , 8
 0000035D  8B 03		mov eax , [ebx]

 0000035F  83 F8 01		cmp eax , 1
 00000362  75 02		jne traverseRightNode
 00000364  EB 08		jmp foundMaxValue

 00000366			traverseRightNode:
				invoke findMax , ebx 
 0000036C  EB 0A		jmp final

 0000036E			foundMaxValue:
 0000036E  8B 45 08		mov eax , [rootNode]
 00000371  8B 00		mov eax , [eax]
 00000373  A3 00000048 R	mov MaxValue , eax

 00000378			final:
				ret
 0000037C			findMax endp
				;///////////////////////////////////// Min Function ///////////////////////////////////////////
 0000037C			findMin proc , rootNode : ptr dword

 0000037F  8B 45 08		mov eax , rootNode
 00000382  8B 5D 08		mov ebx , rootNode
 00000385  2D 00000122 R	sub eax , offset bst
 0000038A  F7 25 0000003C R	mul multi
 00000390  BA 00000000		mov edx , 0
 00000395  F7 35 00000040 R	div dividend
 0000039B  03 D8		add ebx , eax
 0000039D  83 C3 04		add ebx , 4
 000003A0  8B 03		mov eax , [ebx]

 000003A2  83 F8 01		cmp eax , 1
 000003A5  75 02		jne traverseLeftNode
 000003A7  EB 08		jmp foundMaxValue

 000003A9			traverseLeftNode:
				invoke findMin , ebx 
 000003AF  EB 0A		jmp final

 000003B1			foundMaxValue:
 000003B1  8B 45 08		mov eax , [rootNode]
 000003B4  8B 00		mov eax , [eax]
 000003B6  A3 0000004C R	mov minValue , eax

 000003BB			final:
				ret
 000003BF			findMin endp
				;///////////////////////////////////// Delete Function ///////////////////////////////////////////
 000003BF			deleteNode proc , rootNode: ptr dword , value : dword

 000003C2  8B 55 0C		mov edx , value 
 000003C5  B9 00000000		mov ecx , 0
 000003CA			l1:

 000003CA  8B 5D 08		mov ebx , rootNode
 000003CD  8B 1B		mov ebx , [ebx]

 000003CF  3B DA		cmp ebx , edx
 000003D1  74 35		je breakLoop
 000003D3  83 FB 01		cmp ebx , 1
 000003D6  74 30		je breakLoop

 000003D8  3B D3		cmp edx , ebx
 000003DA  72 02		jb traverseLeft
 000003DC  EB 14		jmp traverseRight

 000003DE			traverseLeft:

 000003DE  8B 45 08		mov eax , rootNode
 000003E1  8B F0		mov esi , eax
 000003E3  2D 00000122 R	sub eax , offset bst
 000003E8  03 F0		add esi , eax
 000003EA  83 C6 04		add esi , 4
 000003ED  89 75 08		mov rootNode , esi
 000003F0  EB 14		jmp fina1_1

 000003F2			traverseRight:
 000003F2  8B 45 08		mov eax , rootNode
 000003F5  8B F0		mov esi , eax
 000003F7  2D 00000122 R	sub eax , offset bst
 000003FC  03 F0		add esi , eax
 000003FE  83 C6 08		add esi , 8
 00000401  89 75 08		mov rootNode , esi
 00000404  EB 00		jmp fina1_1

 00000406			fina1_1:

 00000406  E2 C2		loop l1

 00000408			breakLoop:

 00000408  8B 5D 08		mov ebx , rootNode
 0000040B  8B 1B		mov ebx , [ebx]

 0000040D  83 FB 01		cmp ebx , 1
 00000410  0F 84 000000C4	je valueNotFound

 00000416  8B 45 08		mov eax , rootNode
 00000419  8B F0		mov esi , eax
 0000041B  2D 00000122 R	sub eax , offset bst
 00000420  03 F0		add esi , eax
 00000422  8B FE		mov edi , esi
 00000424  83 C7 04		add edi , 4
 00000427  83 C6 08		add esi , 8
				 
 0000042A  8B 0F		mov ecx , [edi]
 0000042C  83 F9 01		cmp ecx , 1
 0000042F  74 02		je case1 ; if left is null
 00000431  EB 16		jmp case2 ; else case

 00000433			case1:
 00000433  8B 0E		mov ecx , [esi]
 00000435  83 F9 01		cmp ecx , 1
 00000438  75 0F		jne case2 ; if right is not null

 0000043A  B8 00000001		mov eax , 1
 0000043F  8B 5D 08		mov ebx , rootNode
 00000442  89 03		mov [ebx] , eax
 00000444  E9 00000080		jmp valueDeleted

 00000449			case2:
 00000449  8B 0E		mov ecx , [esi]
 0000044B  83 F9 01		cmp ecx , 1 
 0000044E  75 02		jne deleteAtRight ; if right is not null
 00000450  EB 13		jmp deleteAtLeft ; if rght is null

 00000452			deleteAtRight:
 00000452  8B 0F		mov ecx , [edi]
 00000454  83 F9 01		cmp ecx , 1
 00000457  75 18		jne case3
 00000459  8B 45 08		mov eax , rootNode
				invoke preOrder , eax , esi
 00000463  EB 64		jmp valueDeleted

 00000465			deleteAtLeft:
 00000465  8B 45 08		mov eax , rootNode
				invoke preOrder ,eax , edi
 0000046F  EB 58		jmp valueDeleted

 00000471			case3:

 00000471  8B 45 08		mov eax , rootNode
 00000474  2D 00000122 R	sub eax , offset bst
 00000479  03 45 08		add eax , rootNode
 0000047C  83 C0 08		add eax , 8
 0000047F  B9 00000000		mov ecx , 0
 00000484  8B 55 08		mov edx, rootNode
 00000487			l2:

 00000487  8B 18		mov ebx , [eax]
 00000489  83 FB 01		cmp ebx , 1
 0000048C  74 0E		je foundValue

 0000048E  8B D0		mov edx, eax
 00000490  2D 00000122 R	sub eax , offset bst
 00000495  03 C2		add eax , edx
 00000497  83 C0 04		add eax , 4

 0000049A  E2 EB		loop l2

 0000049C			foundValue:
 0000049C  8B 1A		mov ebx , [edx]
 0000049E  8B 45 08		mov eax , rootNode
 000004A1  89 18		mov [eax] , ebx

 000004A3  8B C2		mov eax , edx
 000004A5  81 EA 00000122 R	sub edx , offset bst
 000004AB  03 D0		add edx , eax
 000004AD  83 C2 08		add edx , 8

 000004B0  8B 1A		mov ebx , [edx]
 000004B2  83 FB 01		cmp ebx , 1
 000004B5  75 09		jne callAnotheFun

 000004B7  BB 00000001		mov ebx , 1
 000004BC  89 18		mov [eax] , ebx
 000004BE  EB 09		jmp valueDeleted

 000004C0			callAnotheFun:
				invoke preOrder , eax , edx
 000004C7  EB 00		jmp valueDeleted

 000004C9			valueDeleted:
 000004C9  BA 000000FB R	mov edx, offset deleteString
 000004CE  E8 00000000 E	call writeString
 000004D3  E8 00000000 E	call crlf
 000004D8  EB 0F		jmp final_2

 000004DA			valueNotFound:
 000004DA  BA 00000112 R	mov edx, offset notdelString
 000004DF  E8 00000000 E	call writeString
 000004E4  E8 00000000 E	call crlf

 000004E9			final_2:
				ret
 000004ED			deleteNode endp
				;///////////////////////////////////// PreOrder Function ///////////////////////////////////////////
 000004ED			preOrder proc ,preNode : ptr dword , currentNode : ptr dowrd

 000004F0  8B 45 0C		mov eax , currentNode
 000004F3  8B 00		mov eax , [eax]
 000004F5  8B 75 08		mov esi , preNode
 000004F8  89 06		mov [esi] , eax

 000004FA  B8 00000001		mov eax, 1
 000004FF  8B 75 0C		mov esi , currentNode
 00000502  89 06		mov [esi] , eax

 00000504  8B 45 0C		mov eax , currentNode
 00000507  2D 00000122 R	sub eax , offset bst
 0000050C  03 45 0C		add eax , currentNode
 0000050F  83 C0 04		add eax , 4

 00000512  8B 18		mov ebx , [eax]
 00000514  83 FB 01		cmp ebx , 1
 00000517  75 17		jne traverseLeft

 00000519			comeback:
 00000519  8B 45 0C		mov eax , currentNode
 0000051C  2D 00000122 R	sub eax , offset bst
 00000521  03 45 0C		add eax , currentNode
 00000524  83 C0 08		add eax , 8

 00000527  8B 18		mov ebx , [eax]
 00000529  83 FB 01		cmp ebx , 1
 0000052C  75 0D		jne traverseRight
 0000052E  EB 14		jmp final

 00000530			traverseLeft:
				invoke preOrder , currentNode , eax
 00000539  EB DE		jmp comeback

 0000053B			traverseRight:
				invoke preOrder , currentNode , eax

 00000544			final:
				ret
 00000548			preOrder endp
				end main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    11/17/19 22:10:50
BST.asm							     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000010DB Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000548 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
deleteNode . . . . . . . . . . .	P Near	 000003BF _TEXT	Length= 0000012E Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  value  . . . . . . . . . . . .	DWord	 bp + 0000000C
  l1 . . . . . . . . . . . . . .	L Near	 000003CA _TEXT	
  traverseLeft . . . . . . . . .	L Near	 000003DE _TEXT	
  traverseRight  . . . . . . . .	L Near	 000003F2 _TEXT	
  fina1_1  . . . . . . . . . . .	L Near	 00000406 _TEXT	
  breakLoop  . . . . . . . . . .	L Near	 00000408 _TEXT	
  case1  . . . . . . . . . . . .	L Near	 00000433 _TEXT	
  case2  . . . . . . . . . . . .	L Near	 00000449 _TEXT	
  deleteAtRight  . . . . . . . .	L Near	 00000452 _TEXT	
  deleteAtLeft . . . . . . . . .	L Near	 00000465 _TEXT	
  case3  . . . . . . . . . . . .	L Near	 00000471 _TEXT	
  l2 . . . . . . . . . . . . . .	L Near	 00000487 _TEXT	
  foundValue . . . . . . . . . .	L Near	 0000049C _TEXT	
  callAnotheFun  . . . . . . . .	L Near	 000004C0 _TEXT	
  valueDeleted . . . . . . . . .	L Near	 000004C9 _TEXT	
  valueNotFound  . . . . . . . .	L Near	 000004DA _TEXT	
  final_2  . . . . . . . . . . .	L Near	 000004E9 _TEXT	
findMax  . . . . . . . . . . . .	P Near	 00000339 _TEXT	Length= 00000043 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  traverseRightNode  . . . . . .	L Near	 00000366 _TEXT	
  foundMaxValue  . . . . . . . .	L Near	 0000036E _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000378 _TEXT	
findMin  . . . . . . . . . . . .	P Near	 0000037C _TEXT	Length= 00000043 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  traverseLeftNode . . . . . . .	L Near	 000003A9 _TEXT	
  foundMaxValue  . . . . . . . .	L Near	 000003B1 _TEXT	
  final  . . . . . . . . . . . .	L Near	 000003BB _TEXT	
insert . . . . . . . . . . . . .	P Near	 000001A8 _TEXT	Length= 0000009F Public STDCALL
  leftNode . . . . . . . . . . .	L Near	 000001BB _TEXT	
  assignValueAtLeft  . . . . . .	L Near	 000001E3 _TEXT	
  rightNode  . . . . . . . . . .	L Near	 000001F6 _TEXT	
  assignValueAtRight . . . . . .	L Near	 0000021E _TEXT	
  assigValueAtRoot . . . . . . .	L Near	 00000231 _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000241 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 000001A8 Public STDCALL
  l1 . . . . . . . . . . . . . .	L Near	 00000037 _TEXT	
  l4 . . . . . . . . . . . . . .	L Near	 00000074 _TEXT	
  found  . . . . . . . . . . . .	L Near	 000000F5 _TEXT	
  notFound . . . . . . . . . . .	L Near	 00000106 _TEXT	
  final1 . . . . . . . . . . . .	L Near	 00000117 _TEXT	
preOrder . . . . . . . . . . . .	P Near	 000004ED _TEXT	Length= 0000005B Public STDCALL
  preNode  . . . . . . . . . . .	DWord	 bp + 00000008
  currentNode  . . . . . . . . .	DWord	 bp + 0000000C
  comeback . . . . . . . . . . .	L Near	 00000519 _TEXT	
  traverseLeft . . . . . . . . .	L Near	 00000530 _TEXT	
  traverseRight  . . . . . . . .	L Near	 0000053B _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000544 _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
searchInTree . . . . . . . . . .	P Near	 000002B9 _TEXT	Length= 00000080 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  value  . . . . . . . . . . . .	DWord	 bp + 0000000C
  comeBack . . . . . . . . . . .	L Near	 000002F0 _TEXT	
  traverseRightNode  . . . . . .	L Near	 0000031A _TEXT	
  traverseLeftNode . . . . . . .	L Near	 00000325 _TEXT	
  found  . . . . . . . . . . . .	L Near	 00000330 _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000335 _TEXT	
traverseInOrder  . . . . . . . .	P Near	 00000247 _TEXT	Length= 00000072 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  print  . . . . . . . . . . . .	L Near	 0000026F _TEXT	
  traverseRightNode  . . . . . .	L Near	 000002A5 _TEXT	
  traverseLeftNode . . . . . . .	L Near	 000002AD _TEXT	
  final  . . . . . . . . . . . .	L Near	 000002B5 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 000010C2 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
array  . . . . . . . . . . . . .	DWord	 00000000 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bst  . . . . . . . . . . . . . .	DWord	 00000122 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
deleteString . . . . . . . . . .	Byte	 000000FB _DATA	
dividend . . . . . . . . . . . .	DWord	 00000040 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
foundString  . . . . . . . . . .	Byte	 000000A5 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxString  . . . . . . . . . . .	Byte	 000000D3 _DATA	
maxValue . . . . . . . . . . . .	DWord	 00000048 _DATA	
minString  . . . . . . . . . . .	Byte	 000000E8 _DATA	
minValue . . . . . . . . . . . .	DWord	 0000004C _DATA	
multi  . . . . . . . . . . . . .	DWord	 0000003C _DATA	
nFoundString . . . . . . . . . .	Byte	 000000BA _DATA	
notdelString . . . . . . . . . .	Byte	 00000112 _DATA	
p1 . . . . . . . . . . . . . . .	Byte	 00000050 _DATA	
p2 . . . . . . . . . . . . . . .	Byte	 00000064 _DATA	
p3 . . . . . . . . . . . . . . .	Byte	 00000084 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
tempIndex  . . . . . . . . . . .	DWord	 00000044 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
