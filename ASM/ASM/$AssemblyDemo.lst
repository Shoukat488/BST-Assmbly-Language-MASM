Microsoft (R) Macro Assembler Version 14.00.23506.0	    11/19/19 21:46:45
BST.asm							     Page 1 - 1


				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 
				INCLUDE Macros.inc
			      C .NOLIST
			      C .LIST
			      C 
				traverseInOrder proto , rootNode : ptr dword
				searchInTree proto , rootNode : ptr dword , value : dword
				deleteNode proto , rootNode: ptr dword , value : dword
				preOrder proto ,preNode : ptr dword , currentNode : ptr dowrd
				findMax proto , rootNode : ptr dword
				findMin proto , rootNode : ptr dword

 00000000			.data
 00000000 00000000		typeFlag dword ?
 00000004 00000000		deleteFlag dword ?
 00000008 00000004		multi dword 4
 0000000C 00000004		dividend dword 4
 00000010 00000000		tempIndex dword ?
 00000014 00000000		maxValue dword 0
 00000018 00000000		minValue dword 0
 0000001C 00000000		minValueNode dword ?
 00000020 00000000		maxValueNode dword ?
 00000024 49 6E 73 65 72	p1 byte "Inserting values : ",0
	   74 69 6E 67 20
	   76 61 6C 75 65
	   73 20 3A 20 00
 00000038 54 72 61 76 65	p2 byte "Traversing binray Tree in order",0
	   72 73 69 6E 67
	   20 62 69 6E 72
	   61 79 20 54 72
	   65 65 20 69 6E
	   20 6F 72 64 65
	   72 00
 00000058 45 6E 74 65 72	p3 byte "Enter value to search in tree : ",0
	   20 76 61 6C 75
	   65 20 74 6F 20
	   73 65 61 72 63
	   68 20 69 6E 20
	   74 72 65 65 20
	   3A 20 00
 00000079 56 61 6C 75 65	foundString byte "Value found in tree ",0
	   20 66 6F 75 6E
	   64 20 69 6E 20
	   74 72 65 65 20
	   00
 0000008E 56 61 6C 75 65	nFoundString byte "Value not found in tree ",0
	   20 6E 6F 74 20
	   66 6F 75 6E 64
	   20 69 6E 20 74
	   72 65 65 20 00
 000000A7 4D 61 78 20 76	maxString byte "Max value in tree : ",0
	   61 6C 75 65 20
	   69 6E 20 74 72
	   65 65 20 3A 20
	   00
 000000BC 4D 69 6E 20 76	minString byte "Min value in tree : ",0
	   61 6C 75 65 20
	   69 6E 20 74 72
	   65 65 20 3A 20
	   00
 000000D1 56 61 6C 75 65	notdelString byte "Value not find ",0
	   20 6E 6F 74 20
	   66 69 6E 64 20
	   00
 000000E1  00002710 [		bst sdword 10000 dup(0)
	    00000000
	   ]

 00000000			.code

 00000000			main PROC
 00000000			TypeScreen:
 00000000  E8 00000000 E	call clrscr
				mwriteln "        ---------------------------------------------------------------------------------------------------"
 00009D21		     2		.data		
 00009D21 20 20 20 20 20     2		??0000 BYTE "        ---------------------------------------------------------------------------------------------------",0	
	   20 20 20 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00
 00000005		     2		.code
 00000005  52		     2		push	edx
 00000006  BA 00009D21 R     2		mov	edx,OFFSET ??0000
 0000000B  E8 00000000 E     2		call	WriteString
 00000010  5A		     2		pop	edx
 00000011  E8 00000000 E     1		call	Crlf
				mwriteln "        ---------------------------------------Binary Search Tree------------------------------------------"
 00009D8D		     2		.data		
 00009D8D 20 20 20 20 20     2		??0001 BYTE "        ---------------------------------------Binary Search Tree------------------------------------------",0	
	   20 20 20 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 42 69 6E
	   61 72 79 20 53
	   65 61 72 63 68
	   20 54 72 65 65
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00
 00000016		     2		.code
 00000016  52		     2		push	edx
 00000017  BA 00009D8D R     2		mov	edx,OFFSET ??0001
 0000001C  E8 00000000 E     2		call	WriteString
 00000021  5A		     2		pop	edx
 00000022  E8 00000000 E     1		call	Crlf
				mwriteln "        ---------------------------------------------------------------------------------------------------"
 00009DF9		     2		.data		
 00009DF9 20 20 20 20 20     2		??0002 BYTE "        ---------------------------------------------------------------------------------------------------",0	
	   20 20 20 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00
 00000027		     2		.code
 00000027  52		     2		push	edx
 00000028  BA 00009DF9 R     2		mov	edx,OFFSET ??0002
 0000002D  E8 00000000 E     2		call	WriteString
 00000032  5A		     2		pop	edx
 00000033  E8 00000000 E     1		call	Crlf
 00000038  E8 00000000 E	call crlf
				mwriteln "                                      On which data type you want to work?"
 00009E65		     2		.data		
 00009E65 20 20 20 20 20     2		??0003 BYTE "                                      On which data type you want to work?",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 4F 6E
	   20 77 68 69 63
	   68 20 64 61 74
	   61 20 74 79 70
	   65 20 79 6F 75
	   20 77 61 6E 74
	   20 74 6F 20 77
	   6F 72 6B 3F 00
 0000003D		     2		.code
 0000003D  52		     2		push	edx
 0000003E  BA 00009E65 R     2		mov	edx,OFFSET ??0003
 00000043  E8 00000000 E     2		call	WriteString
 00000048  5A		     2		pop	edx
 00000049  E8 00000000 E     1		call	Crlf
				mwriteln "                                               1 - Character"
 00009EB0		     2		.data		
 00009EB0 20 20 20 20 20     2		??0004 BYTE "                                               1 - Character",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 31 20 2D
	   20 43 68 61 72
	   61 63 74 65 72
	   00
 0000004E		     2		.code
 0000004E  52		     2		push	edx
 0000004F  BA 00009EB0 R     2		mov	edx,OFFSET ??0004
 00000054  E8 00000000 E     2		call	WriteString
 00000059  5A		     2		pop	edx
 0000005A  E8 00000000 E     1		call	Crlf
				mwriteln "                                               2 - Integer"
 00009EED		     2		.data		
 00009EED 20 20 20 20 20     2		??0005 BYTE "                                               2 - Integer",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 32 20 2D
	   20 49 6E 74 65
	   67 65 72 00
 0000005F		     2		.code
 0000005F  52		     2		push	edx
 00000060  BA 00009EED R     2		mov	edx,OFFSET ??0005
 00000065  E8 00000000 E     2		call	WriteString
 0000006A  5A		     2		pop	edx
 0000006B  E8 00000000 E     1		call	Crlf
				mwriteln "                                               3 - Exit"
 00009F28		     2		.data		
 00009F28 20 20 20 20 20     2		??0006 BYTE "                                               3 - Exit",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 33 20 2D
	   20 45 78 69 74
	   00
 00000070		     2		.code
 00000070  52		     2		push	edx
 00000071  BA 00009F28 R     2		mov	edx,OFFSET ??0006
 00000076  E8 00000000 E     2		call	WriteString
 0000007B  5A		     2		pop	edx
 0000007C  E8 00000000 E     1		call	Crlf
 00000081  E8 00000000 E	call readInt
 00000086  83 F8 01		cmp eax , 1
 00000089  74 13		je charType
 0000008B  83 F8 02		cmp eax , 2
 0000008E  74 15		je intType
 00000090  83 F8 03		cmp eax , 3
 00000093  0F 84 000003BA	je endProgram
 00000099  E9 FFFFFF62		jmp TypeScreen

 0000009E			charType:
 0000009E  A3 00000000 R	mov typeFlag , eax
 000000A3  EB 07		jmp choice

 000000A5			intType:
 000000A5  A3 00000000 R	mov typeFlag , eax
 000000AA  EB 00		jmp choice

 000000AC			choice:
 000000AC  E8 00000000 E	call clrscr
				mwriteln "        ---------------------------------------------------------------------------------------------------"
 00009F60		     2		.data		
 00009F60 20 20 20 20 20     2		??0007 BYTE "        ---------------------------------------------------------------------------------------------------",0	
	   20 20 20 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00
 000000B1		     2		.code
 000000B1  52		     2		push	edx
 000000B2  BA 00009F60 R     2		mov	edx,OFFSET ??0007
 000000B7  E8 00000000 E     2		call	WriteString
 000000BC  5A		     2		pop	edx
 000000BD  E8 00000000 E     1		call	Crlf
				mwriteln "        ---------------------------------------Binary Search Tree------------------------------------------"
 00009FCC		     2		.data		
 00009FCC 20 20 20 20 20     2		??0008 BYTE "        ---------------------------------------Binary Search Tree------------------------------------------",0	
	   20 20 20 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 42 69 6E
	   61 72 79 20 53
	   65 61 72 63 68
	   20 54 72 65 65
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00
 000000C2		     2		.code
 000000C2  52		     2		push	edx
 000000C3  BA 00009FCC R     2		mov	edx,OFFSET ??0008
 000000C8  E8 00000000 E     2		call	WriteString
 000000CD  5A		     2		pop	edx
 000000CE  E8 00000000 E     1		call	Crlf
				mwriteln "        ---------------------------------------------------------------------------------------------------"
 0000A038		     2		.data		
 0000A038 20 20 20 20 20     2		??0009 BYTE "        ---------------------------------------------------------------------------------------------------",0	
	   20 20 20 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 2D 2D 2D
	   2D 2D 00
 000000D3		     2		.code
 000000D3  52		     2		push	edx
 000000D4  BA 0000A038 R     2		mov	edx,OFFSET ??0009
 000000D9  E8 00000000 E     2		call	WriteString
 000000DE  5A		     2		pop	edx
 000000DF  E8 00000000 E     1		call	Crlf
				mwriteln "                                              1 - Insert into tree "
 0000A0A4		     2		.data		
 0000A0A4 20 20 20 20 20     2		??000A BYTE "                                              1 - Insert into tree ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 31 20 2D 20
	   49 6E 73 65 72
	   74 20 69 6E 74
	   6F 20 74 72 65
	   65 20 00
 000000E4		     2		.code
 000000E4  52		     2		push	edx
 000000E5  BA 0000A0A4 R     2		mov	edx,OFFSET ??000A
 000000EA  E8 00000000 E     2		call	WriteString
 000000EF  5A		     2		pop	edx
 000000F0  E8 00000000 E     1		call	Crlf
				mwriteln "                                              2 - Traverse tree "
 0000A0E8		     2		.data		
 0000A0E8 20 20 20 20 20     2		??000B BYTE "                                              2 - Traverse tree ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 32 20 2D 20
	   54 72 61 76 65
	   72 73 65 20 74
	   72 65 65 20 00
 000000F5		     2		.code
 000000F5  52		     2		push	edx
 000000F6  BA 0000A0E8 R     2		mov	edx,OFFSET ??000B
 000000FB  E8 00000000 E     2		call	WriteString
 00000100  5A		     2		pop	edx
 00000101  E8 00000000 E     1		call	Crlf
				mwriteln "                                              3 - Search into tree "
 0000A129		     2		.data		
 0000A129 20 20 20 20 20     2		??000C BYTE "                                              3 - Search into tree ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 33 20 2D 20
	   53 65 61 72 63
	   68 20 69 6E 74
	   6F 20 74 72 65
	   65 20 00
 00000106		     2		.code
 00000106  52		     2		push	edx
 00000107  BA 0000A129 R     2		mov	edx,OFFSET ??000C
 0000010C  E8 00000000 E     2		call	WriteString
 00000111  5A		     2		pop	edx
 00000112  E8 00000000 E     1		call	Crlf
				mwriteln "                                              4 - Delete from tree "
 0000A16D		     2		.data		
 0000A16D 20 20 20 20 20     2		??000D BYTE "                                              4 - Delete from tree ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 34 20 2D 20
	   44 65 6C 65 74
	   65 20 66 72 6F
	   6D 20 74 72 65
	   65 20 00
 00000117		     2		.code
 00000117  52		     2		push	edx
 00000118  BA 0000A16D R     2		mov	edx,OFFSET ??000D
 0000011D  E8 00000000 E     2		call	WriteString
 00000122  5A		     2		pop	edx
 00000123  E8 00000000 E     1		call	Crlf
				mwriteln "                                              5 - Find maximum value in tree "
 0000A1B1		     2		.data		
 0000A1B1 20 20 20 20 20     2		??000E BYTE "                                              5 - Find maximum value in tree ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 35 20 2D 20
	   46 69 6E 64 20
	   6D 61 78 69 6D
	   75 6D 20 76 61
	   6C 75 65 20 69
	   6E 20 74 72 65
	   65 20 00
 00000128		     2		.code
 00000128  52		     2		push	edx
 00000129  BA 0000A1B1 R     2		mov	edx,OFFSET ??000E
 0000012E  E8 00000000 E     2		call	WriteString
 00000133  5A		     2		pop	edx
 00000134  E8 00000000 E     1		call	Crlf
				mwriteln "                                              6 - Find minimum value in tree "
 0000A1FF		     2		.data		
 0000A1FF 20 20 20 20 20     2		??000F BYTE "                                              6 - Find minimum value in tree ",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 36 20 2D 20
	   46 69 6E 64 20
	   6D 69 6E 69 6D
	   75 6D 20 76 61
	   6C 75 65 20 69
	   6E 20 74 72 65
	   65 20 00
 00000139		     2		.code
 00000139  52		     2		push	edx
 0000013A  BA 0000A1FF R     2		mov	edx,OFFSET ??000F
 0000013F  E8 00000000 E     2		call	WriteString
 00000144  5A		     2		pop	edx
 00000145  E8 00000000 E     1		call	Crlf
				mwriteln "                                              7 - End program"
 0000A24D		     2		.data		
 0000A24D 20 20 20 20 20     2		??0010 BYTE "                                              7 - End program",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 37 20 2D 20
	   45 6E 64 20 70
	   72 6F 67 72 61
	   6D 00
 0000014A		     2		.code
 0000014A  52		     2		push	edx
 0000014B  BA 0000A24D R     2		mov	edx,OFFSET ??0010
 00000150  E8 00000000 E     2		call	WriteString
 00000155  5A		     2		pop	edx
 00000156  E8 00000000 E     1		call	Crlf
 0000015B  E8 00000000 E	call readInt
 00000160  83 F8 01		cmp eax , 1
 00000163  74 51		je insertIntoTree
 00000165  83 F8 02		cmp eax , 2
 00000168  0F 84 000000E3	je traverseIntoTree
 0000016E  83 F8 03		cmp eax , 3
 00000171  0F 84 0000011B	je search
 00000177  83 F8 04		cmp eax , 4
 0000017A  0F 84 0000025C	je deleteFromTree
 00000180  83 F8 05		cmp eax , 5
 00000183  0F 84 000001A1	je maxValueIntoTree
 00000189  83 F8 06		cmp eax , 6
 0000018C  0F 84 000001F1	je minValueIntoTree
 00000192  83 F8 07		cmp eax , 7
 00000195  0F 84 000002B8	je endProgram


 0000019B			wrongChoice:

				mwriteln "Enter correct choice "
 0000A28B		     2		.data		
 0000A28B 45 6E 74 65 72     2		??0011 BYTE "Enter correct choice ",0	
	   20 63 6F 72 72
	   65 63 74 20 63
	   68 6F 69 63 65
	   20 00
 0000019B		     2		.code
 0000019B  52		     2		push	edx
 0000019C  BA 0000A28B R     2		mov	edx,OFFSET ??0011
 000001A1  E8 00000000 E     2		call	WriteString
 000001A6  5A		     2		pop	edx
 000001A7  E8 00000000 E     1		call	Crlf
 000001AC  E8 00000000 E	call waitMsg
 000001B1  E9 FFFFFEF6		jmp choice

 000001B6			insertIntoTree:
				;<---------------------------------insert into tree------------------------->
 000001B6  E8 00000000 E	call clrscr
 000001BB  BA 00000000		mov edx , 0
 000001C0  B8 00000000		mov eax , 0
 000001C5  BB 00000000		mov ebx , 0
 000001CA  B9 00000000		mov ecx , 0
 000001CF  BF 000000E1 R	mov edi , offset bst
				mwriteln "How many elements you want to insert: "
 0000A2A1		     2		.data		
 0000A2A1 48 6F 77 20 6D     2		??0012 BYTE "How many elements you want to insert: ",0	
	   61 6E 79 20 65
	   6C 65 6D 65 6E
	   74 73 20 79 6F
	   75 20 77 61 6E
	   74 20 74 6F 20
	   69 6E 73 65 72
	   74 3A 20 00
 000001D4		     2		.code
 000001D4  52		     2		push	edx
 000001D5  BA 0000A2A1 R     2		mov	edx,OFFSET ??0012
 000001DA  E8 00000000 E     2		call	WriteString
 000001DF  5A		     2		pop	edx
 000001E0  E8 00000000 E     1		call	Crlf
 000001E5  E8 00000000 E	call readInt
 000001EA  8B C8		mov ecx , eax
				mwriteln "Enter elements "
 0000A2C8		     2		.data		
 0000A2C8 45 6E 74 65 72     2		??0013 BYTE "Enter elements ",0	
	   20 65 6C 65 6D
	   65 6E 74 73 20
	   00
 000001EC		     2		.code
 000001EC  52		     2		push	edx
 000001ED  BA 0000A2C8 R     2		mov	edx,OFFSET ??0013
 000001F2  E8 00000000 E     2		call	WriteString
 000001F7  5A		     2		pop	edx
 000001F8  E8 00000000 E     1		call	Crlf
 000001FD			l1:
 000001FD  A1 00000000 R	mov eax , typeFlag
 00000202  83 F8 01		cmp eax , 1
 00000205  74 09		je readCharacter
 00000207  EB 00		jmp readInteger

 00000209			readInteger:
 00000209  E8 00000000 E	call readDec
 0000020E  EB 17		jmp endInput

 00000210			readCharacter:
 00000210  B8 00000000		mov eax , 0
 00000215  E8 00000000 E	call readChar
 0000021A  0F B6 C0		movzx eax , al
 0000021D  E8 00000000 E	call writeChar
 00000222  E8 00000000 E	call crlf
 00000227			endInput:
 00000227  8B D8		mov ebx , eax
 00000229  68 000000E5 R	push offset [bst + 4]
 0000022E  68 000000E9 R	push offset [bst + 8]

 00000233  E8 00000244		call insert

 00000238  83 C4 08		add esp , 8
 0000023B  BF 000000E1 R	mov edi , offset bst

 00000240  E2 BB		loop l1

 00000242  E8 00000000 E	call crlf

 00000247  E8 00000000 E	call waitMsg
 0000024C  E9 FFFFFE5B		jmp choice

 00000251			traverseIntoTree:
				;<-----------------------------------Traverse into tree------------------------------------->
 00000251  E8 00000000 E	call clrscr
 00000256  BA 00000038 R	mov edx , offset p2
 0000025B  E8 00000000 E	call writeString
 00000260  E8 00000000 E	call crlf

 00000265  BA 00000000		mov edx , 0
 0000026A  B8 00000000		mov eax , 0
 0000026F  BB 00000000		mov ebx , 0
 00000274  B9 00000000		mov ecx , 0

 00000279  BE 000000E1 R	mov esi , offset bst
				invoke traverseInOrder , addr bst

 00000288  E8 00000000 E	call waitMsg
 0000028D  E9 FFFFFE1A		jmp choice
 00000292			search:
				;<-----------------------------------Search into tree------------------------------------->
 00000292  E8 00000000 E	call clrscr
				mwriteln "Enter value : "
 0000A2D8		     2		.data		
 0000A2D8 45 6E 74 65 72     2		??0014 BYTE "Enter value : ",0	
	   20 76 61 6C 75
	   65 20 3A 20 00
 00000297		     2		.code
 00000297  52		     2		push	edx
 00000298  BA 0000A2D8 R     2		mov	edx,OFFSET ??0014
 0000029D  E8 00000000 E     2		call	WriteString
 000002A2  5A		     2		pop	edx
 000002A3  E8 00000000 E     1		call	Crlf

 000002A8  A1 00000000 R	mov eax , typeFlag
 000002AD  83 F8 01		cmp eax , 1
 000002B0  74 0E		je readCharacter2
 000002B2  EB 00		jmp readInteger2

 000002B4			readInteger2:
 000002B4  B8 00000000		mov eax , 0
 000002B9  E8 00000000 E	call readDec
 000002BE  EB 17		jmp endInput2

 000002C0			readCharacter2:
 000002C0  B8 00000000		mov eax , 0
 000002C5  E8 00000000 E	call readChar
 000002CA  0F B6 C0		movzx eax , al
 000002CD  E8 00000000 E	call writeChar
 000002D2  E8 00000000 E	call crlf
 000002D7			endInput2:

 000002D7  BA 00000000		mov edx , 0
 000002DC  BB 00000000		mov ebx , 0
 000002E1  B9 00000000		mov ecx , 0

				invoke searchInTree , offset bst , eax

 000002F1  83 F9 01		cmp ecx , 1
 000002F4  74 02		je found
 000002F6  EB 19		jmp notFound

 000002F8			found:
 000002F8  BA 00000079 R	mov edx , offset foundString
 000002FD  E8 00000000 E	call writeString
 00000302  E8 00000000 E	call crlf

 00000307  E8 00000000 E	call waitMsg
 0000030C  E9 FFFFFD9B		jmp choice

 00000311			notFound:
 00000311  BA 0000008E R	mov edx , offset nFoundString
 00000316  E8 00000000 E	call writeString
 0000031B  E8 00000000 E	call crlf

 00000320  E8 00000000 E	call waitMsg
 00000325  E9 FFFFFD82		jmp choice

 0000032A			maxValueIntoTree:
				;<-----------------------------------Max in tree------------------------------------->
 0000032A  E8 00000000 E	call clrscr
				invoke findMax , offset bst
 00000339  BA 000000A7 R	mov edx , offset maxString
 0000033E  E8 00000000 E	call writeString

 00000343  A1 00000000 R	mov eax , typeFlag
 00000348  83 F8 01		cmp eax , 1
 0000034B  74 18		je writeCharacter
 0000034D  EB 00		jmp writeInteger

 0000034F			writeInteger:
 0000034F  B8 00000000		mov eax , 0
 00000354  A1 00000014 R	mov eax , maxValue
 00000359  E8 00000000 E	call writeDec
 0000035E  E8 00000000 E	call crlf
 00000363  EB 14		jmp endInput3

 00000365			writeCharacter:
 00000365  B8 00000000		mov eax , 0
 0000036A  A1 00000014 R	mov eax , maxValue
 0000036F  E8 00000000 E	call writeChar
 00000374  E8 00000000 E	call crlf
 00000379			endInput3:

 00000379  E8 00000000 E	call waitMsg
 0000037E  E9 FFFFFD29		jmp choice
 00000383			minValueIntoTree:
				;<-----------------------------------Min in tree------------------------------------->
 00000383  E8 00000000 E	call clrscr
				invoke findMin , offset bst
 00000392  BA 000000BC R	mov edx , offset minString
 00000397  E8 00000000 E	call writeString

 0000039C  A1 00000000 R	mov eax , typeFlag
 000003A1  83 F8 01		cmp eax , 1
 000003A4  74 18		je writeCharacter2
 000003A6  EB 00		jmp writeInteger2

 000003A8			writeInteger2:
 000003A8  B8 00000000		mov eax , 0
 000003AD  A1 00000018 R	mov eax , minValue
 000003B2  E8 00000000 E	call writeDec
 000003B7  E8 00000000 E	call crlf
 000003BC  EB 14		jmp endInput4

 000003BE			writeCharacter2:
 000003BE  B8 00000000		mov eax , 0
 000003C3  A1 00000018 R	mov eax , minValue
 000003C8  E8 00000000 E	call writeChar
 000003CD  E8 00000000 E	call crlf
 000003D2			endInput4:

 000003D2  E8 00000000 E	call waitMsg
 000003D7  E9 FFFFFCD0		jmp choice

 000003DC			deleteFromTree:
				;<-----------------------------------Delete from tree------------------------------------->
 000003DC  E8 00000000 E	call clrscr
				mwriteln "Enter value to delete : "
 0000A2E7		     2		.data		
 0000A2E7 45 6E 74 65 72     2		??0015 BYTE "Enter value to delete : ",0	
	   20 76 61 6C 75
	   65 20 74 6F 20
	   64 65 6C 65 74
	   65 20 3A 20 00
 000003E1		     2		.code
 000003E1  52		     2		push	edx
 000003E2  BA 0000A2E7 R     2		mov	edx,OFFSET ??0015
 000003E7  E8 00000000 E     2		call	WriteString
 000003EC  5A		     2		pop	edx
 000003ED  E8 00000000 E     1		call	Crlf

 000003F2  A1 00000000 R	mov eax , typeFlag
 000003F7  83 F8 01		cmp eax , 1
 000003FA  74 0E		je readCharacter3
 000003FC  EB 00		jmp readInteger3

 000003FE			readInteger3:
 000003FE  B8 00000000		mov eax , 0
 00000403  E8 00000000 E	call readDec
 00000408  EB 17		jmp endInput5

 0000040A			readCharacter3:
 0000040A  B8 00000000		mov eax , 0
 0000040F  E8 00000000 E	call readChar
 00000414  0F B6 C0		movzx eax , al
 00000417  E8 00000000 E	call writeChar
 0000041C  E8 00000000 E	call crlf
 00000421			endInput5:

				invoke deleteNode , offset bst , eax

 0000042C  A1 00000004 R	mov eax , deleteFlag
 00000431  83 F8 01		cmp eax , 1
 00000434  74 02		je printDeleteMessage
 00000436  EB 11		jmp noMessage
 00000438			printDeleteMessage:
				mwriteln "Value has been deleted"
 0000A300		     2		.data		
 0000A300 56 61 6C 75 65     2		??0016 BYTE "Value has been deleted",0	
	   20 68 61 73 20
	   62 65 65 6E 20
	   64 65 6C 65 74
	   65 64 00
 00000438		     2		.code
 00000438  52		     2		push	edx
 00000439  BA 0000A300 R     2		mov	edx,OFFSET ??0016
 0000043E  E8 00000000 E     2		call	WriteString
 00000443  5A		     2		pop	edx
 00000444  E8 00000000 E     1		call	Crlf
 00000449			noMessage:
 00000449  E8 00000000 E	call waitMsg
 0000044E  E9 FFFFFC59		jmp choice


 00000453			endProgram:
				mwriteln"                                                ~THANK YOU~"
 0000A317		     2		.data		
 0000A317 20 20 20 20 20     2		??0017 BYTE "                                                ~THANK YOU~",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 7E 54
	   48 41 4E 4B 20
	   59 4F 55 7E 00
 00000453		     2		.code
 00000453  52		     2		push	edx
 00000454  BA 0000A317 R     2		mov	edx,OFFSET ??0017
 00000459  E8 00000000 E     2		call	WriteString
 0000045E  5A		     2		pop	edx
 0000045F  E8 00000000 E     1		call	Crlf
				mwriteln "                          ......................End Program....................."
 0000A353		     2		.data		
 0000A353 20 20 20 20 20     2		??0018 BYTE "                          ......................End Program.....................",0	
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 20 20 20 20
	   20 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 45 6E
	   64 20 50 72 6F
	   67 72 61 6D 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   2E 2E 2E 2E 2E
	   00
 00000464		     2		.code
 00000464  52		     2		push	edx
 00000465  BA 0000A353 R     2		mov	edx,OFFSET ??0018
 0000046A  E8 00000000 E     2		call	WriteString
 0000046F  5A		     2		pop	edx
 00000470  E8 00000000 E     1		call	Crlf
				exit

 0000047C			main endp
				;//////////////////////////////////////////////// Insert Function //////////////////////////////////////////
 0000047C			insert proc

 0000047C  55			push ebp
 0000047D  8B EC		mov ebp , esp

 0000047F  3B 1F		cmp ebx , [edi]
 00000481  74 75		je final

 00000483  8B 07		mov eax , [edi]

 00000485  83 F8 00		cmp eax , 0
 00000488  74 68		je assignValueAtRoot

 0000048A  3B D8		cmp  ebx , eax
 0000048C  72 02		jb leftNode
 0000048E  EB 31		jmp rightNode

 00000490			leftNode:
 00000490  8B 45 0C		mov eax, [ebp + 12]
 00000493  8B 00		mov eax , [eax]
 00000495  83 F8 00		cmp eax , 0
 00000498  74 1E		je assignValueAtLeft

 0000049A  8B 45 0C		mov eax , [ebp + 12]
 0000049D  8B F8		mov edi , eax
 0000049F  2D 000000E1 R	sub eax , offset bst

 000004A4  8B 75 0C		mov esi , [ebp + 12]
 000004A7  03 F0		add esi , eax 

 000004A9  83 C6 04		add esi , 4
 000004AC  56			push esi
 000004AD  83 C6 04		add esi , 4
 000004B0  56			push esi

 000004B1  E8 FFFFFFC6		call insert 
 000004B6  EB 40		jmp final

 000004B8			assignValueAtLeft:
 000004B8  8B 75 0C		mov esi , [ebp + 12]
 000004BB  89 1E		mov [esi] , ebx
 000004BD  8B 06		mov eax , [esi]

 000004BF  EB 37		jmp final

 000004C1			rightNode:
 000004C1  8B 45 08		mov eax, [ebp + 8]
 000004C4  8B 00		mov eax , [eax]
 000004C6  83 F8 00		cmp eax , 0
 000004C9  74 1E		je assignValueAtRight
 000004CB  8B 45 08		mov eax , [ebp + 8]
 000004CE  8B F8		mov edi , eax
 000004D0  2D 000000E1 R	sub eax , offset bst

 000004D5  8B 75 08		mov esi , [ebp + 8]
 000004D8  03 F0		add esi , eax 

 000004DA  83 C6 04		add esi , 4
 000004DD  56			push esi
 000004DE  83 C6 04		add esi , 4
 000004E1  56			push esi

 000004E2  E8 FFFFFF95		call insert
 000004E7  EB 0F		jmp final

 000004E9			assignValueAtRight:
 000004E9  8B 75 08		mov esi , [ebp + 8]
 000004EC  89 1E		mov [esi] , ebx
 000004EE  8B 06		mov eax , [esi]
 000004F0  EB 06		jmp final

 000004F2			assignValueAtRoot:
 000004F2  89 1F		mov [edi] , ebx
 000004F4  8B 07		mov eax , [edi]
 000004F6  EB 00		jmp final

 000004F8			final:

 000004F8  8B E5		mov esp , ebp
 000004FA  5D			pop ebp 

 000004FB  C2 0008		ret 8

 000004FE			insert endp
				;///////////////////////////////////////////////// Traverse Function ///////////////////////////////////////
 000004FE			traverseInOrder proc , rootNode : ptr dword

 00000501  8B 45 08		mov eax , rootNode
 00000504  8B 5D 08		mov ebx , rootNode
 00000507  2B C6		sub eax , esi
 00000509  03 D8		add ebx , eax
 0000050B  83 C3 04		add ebx , 4
 0000050E  8B 03		mov eax , [ebx]

 00000510  83 F8 00		cmp eax , 0
 00000513  75 4A		jne traverseLeftNode

 00000515			print:
 00000515  A1 00000000 R	mov eax , typeFlag
 0000051A  83 F8 01		cmp eax , 1
 0000051D  74 02		je printChar
 0000051F  EB 11		jmp printInt

 00000521			printChar:
 00000521  8B 45 08		mov eax , [rootNode]
 00000524  8B 00		mov eax , [eax]
 00000526  E8 00000000 E	call writeChar
 0000052B  E8 00000000 E	call crlf
 00000530  EB 0F		jmp endPrint

 00000532			printInt:
 00000532  8B 45 08		mov eax , [rootNode]
 00000535  8B 00		mov eax , [eax]
 00000537  E8 00000000 E	call writeDec
 0000053C  E8 00000000 E	call crlf

 00000541			endPrint:

 00000541  8B 45 08		mov eax , rootNode
 00000544  8B 5D 08		mov ebx , rootNode
 00000547  2B C6		sub eax , esi
 00000549  03 D8		add ebx , eax
 0000054B  83 C3 08		add ebx , 8
 0000054E  8B 03		mov eax , [ebx]

 00000550  83 F8 00		cmp eax , 0
 00000553  75 02		jne traverseRightNode
 00000555  EB 10		jmp final

 00000557			traverseRightNode:
				invoke traverseInOrder , ebx
 0000055D  EB 08		jmp final

 0000055F			traverseLeftNode:
				invoke traverseInOrder , ebx
 00000565  EB AE		jmp print

 00000567			final:
				ret
 0000056B			traverseInOrder endp
				;////////////////////////////////////////// Search Function ////////////////////////////////////////////

 0000056B			searchInTree proc , rootNode : ptr dword , value : dword

 0000056E  8B 45 08		mov eax , [rootNode]
 00000571  8B 00		mov eax , [eax]
 00000573  8B 55 0C		mov edx , value
 00000576  3B C2		cmp eax , edx
 00000578  74 46		je found

 0000057A  8B 45 08		mov eax , rootNode
 0000057D  8B 5D 08		mov ebx , rootNode
 00000580  2D 000000E1 R	sub eax , offset bst
 00000585  03 D8		add ebx , eax
 00000587  83 C3 04		add ebx , 4
 0000058A  8B 03		mov eax , [ebx]

 0000058C  83 F8 00		cmp eax , 0
 0000058F  75 24		jne traverseLeftNode

 00000591			comeBack:
 00000591  8B 45 08		mov eax , rootNode
 00000594  8B 5D 08		mov ebx , rootNode
 00000597  2D 000000E1 R	sub eax , offset bst
 0000059C  03 D8		add ebx , eax
 0000059E  83 C3 08		add ebx , 8
 000005A1  8B 03		mov eax , [ebx]

 000005A3  83 F8 00		cmp eax , 0
 000005A6  75 02		jne traverseRightNode
 000005A8  EB 1B		jmp final

 000005AA			traverseRightNode:
				invoke searchInTree , ebx , value
 000005B3  EB 10		jmp final

 000005B5			traverseLeftNode:
				invoke searchInTree , ebx , value
 000005BE  EB D1		jmp comeBack

 000005C0			found:
 000005C0  B9 00000001		mov ecx , 1

 000005C5			final:
				ret

 000005C9			searchInTree endp
				;///////////////////////////////////// Max Function ///////////////////////////////////////////
 000005C9			findMax proc , rootNode : ptr dword

 000005CC  8B 45 08		mov eax , rootNode
 000005CF  8B 5D 08		mov ebx , rootNode
 000005D2  2D 000000E1 R	sub eax , offset bst
 000005D7  03 D8		add ebx , eax
 000005D9  83 C3 08		add ebx , 8
 000005DC  8B 03		mov eax , [ebx]

 000005DE  83 F8 00		cmp eax , 0
 000005E1  75 02		jne traverseRightNode
 000005E3  EB 08		jmp foundMaxValue

 000005E5			traverseRightNode:
				invoke findMax , ebx 
 000005EB  EB 0F		jmp final

 000005ED			foundMaxValue:
 000005ED  8B 45 08		mov eax , [rootNode]
 000005F0  A3 00000020 R	mov maxValueNode , eax
 000005F5  8B 00		mov eax , [eax]
 000005F7  A3 00000014 R	mov MaxValue , eax

 000005FC			final:
				ret
 00000600			findMax endp
				;///////////////////////////////////// Min Function ///////////////////////////////////////////
 00000600			findMin proc , rootNode : ptr dword

 00000603  8B 45 08		mov eax , rootNode
 00000606  8B 5D 08		mov ebx , rootNode
 00000609  2D 000000E1 R	sub eax , offset bst
 0000060E  03 D8		add ebx , eax
 00000610  83 C3 04		add ebx , 4
 00000613  8B 03		mov eax , [ebx]

 00000615  83 F8 00		cmp eax , 0
 00000618  75 02		jne traverseLeftNode
 0000061A  EB 08		jmp foundMaxValue

 0000061C			traverseLeftNode:
				invoke findMin , ebx 
 00000622  EB 0F		jmp final

 00000624			foundMaxValue:
 00000624  8B 45 08		mov eax , [rootNode]
 00000627  A3 0000001C R	mov minValueNode , eax
 0000062C  8B 00		mov eax , [eax]
 0000062E  A3 00000018 R	mov minValue , eax

 00000633			final:
				ret
 00000637			findMin endp
				;///////////////////////////////////// Delete Function ///////////////////////////////////////////
 00000637			deleteNode proc , rootNode: ptr dword , value : dword

 0000063A  8B 55 0C		mov edx , value 
 0000063D  B9 00000000		mov ecx , 0
 00000642			l1:

 00000642  8B 5D 08		mov ebx , rootNode
 00000645  8B 1B		mov ebx , [ebx]

 00000647  3B DA		cmp ebx , edx
 00000649  74 35		je breakLoop
 0000064B  83 FB 00		cmp ebx , 0
 0000064E  74 30		je breakLoop

 00000650  3B D3		cmp edx , ebx
 00000652  72 02		jb traverseLeft
 00000654  EB 14		jmp traverseRight

 00000656			traverseLeft:

 00000656  8B 45 08		mov eax , rootNode
 00000659  8B F0		mov esi , eax
 0000065B  2D 000000E1 R	sub eax , offset bst
 00000660  03 F0		add esi , eax
 00000662  83 C6 04		add esi , 4
 00000665  89 75 08		mov rootNode , esi
 00000668  EB 14		jmp fina1_1

 0000066A			traverseRight:
 0000066A  8B 45 08		mov eax , rootNode
 0000066D  8B F0		mov esi , eax
 0000066F  2D 000000E1 R	sub eax , offset bst
 00000674  03 F0		add esi , eax
 00000676  83 C6 08		add esi , 8
 00000679  89 75 08		mov rootNode , esi
 0000067C  EB 00		jmp fina1_1

 0000067E			fina1_1:

 0000067E  E2 C2		loop l1

 00000680			breakLoop:

 00000680  8B 5D 08		mov ebx , rootNode
 00000683  8B 1B		mov ebx , [ebx]

 00000685  83 FB 00		cmp ebx , 0
 00000688  0F 84 000000E1	je valueNotFound

 0000068E  8B 45 08		mov eax , rootNode
 00000691  8B F0		mov esi , eax
 00000693  2D 000000E1 R	sub eax , offset bst
 00000698  03 F0		add esi , eax
 0000069A  8B FE		mov edi , esi
 0000069C  83 C7 04		add edi , 4
 0000069F  83 C6 08		add esi , 8
				 
 000006A2  8B 0F		mov ecx , [edi]
 000006A4  83 F9 00		cmp ecx , 0
 000006A7  74 02		je case1 ; if left is null
 000006A9  EB 16		jmp case2 ; else case

 000006AB			case1:
 000006AB  8B 0E		mov ecx , [esi]
 000006AD  83 F9 00		cmp ecx , 0
 000006B0  75 0F		jne case2 ; if right is not null

 000006B2  B8 00000000		mov eax , 0
 000006B7  8B 5D 08		mov ebx , rootNode
 000006BA  89 03		mov [ebx] , eax
 000006BC  E9 000000A2		jmp valueDeleted

 000006C1			case2:
 000006C1  8B 0E		mov ecx , [esi]
 000006C3  83 F9 00		cmp ecx , 0 
 000006C6  75 02		jne deleteAtRight ; if right is not null
 000006C8  EB 23		jmp deleteAtLeft ; if rght is null

 000006CA			deleteAtRight:
 000006CA  8B 0F		mov ecx , [edi]
 000006CC  83 F9 00		cmp ecx , 0
 000006CF  75 38		jne case3

				invoke findMin , esi
 000006D7  8B 35 0000001C R	mov esi , minValueNode
 000006DD  8B 06		mov eax , [esi]
 000006DF  8B 5D 08		mov ebx , rootNode
 000006E2  89 03		mov [ebx] , eax
				invoke deleteNode , esi , eax
 000006EB  EB 76		jmp valueDeleted

 000006ED			deleteAtLeft:
				invoke findMax , edi
 000006F3  8B 3D 00000020 R	mov edi , maxValueNode
 000006F9  8B 07		mov eax , [edi]
 000006FB  8B 5D 08		mov ebx , rootNode
 000006FE  89 03		mov [ebx] , eax
				invoke deleteNode , edi , eax
 00000707  EB 5A		jmp valueDeleted

 00000709			case3:

 00000709  8B 45 08		mov eax , rootNode
 0000070C  2D 000000E1 R	sub eax , offset bst
 00000711  03 45 08		add eax , rootNode
 00000714  83 C0 08		add eax , 8
 00000717  B9 00000000		mov ecx , 0
 0000071C  8B 55 08		mov edx, rootNode
 0000071F			l2:

 0000071F  8B 18		mov ebx , [eax]
 00000721  83 FB 00		cmp ebx , 0
 00000724  74 0E		je foundValue

 00000726  8B D0		mov edx, eax
 00000728  2D 000000E1 R	sub eax , offset bst
 0000072D  03 C2		add eax , edx
 0000072F  83 C0 04		add eax , 4

 00000732  E2 EB		loop l2

 00000734			foundValue:
 00000734  8B 1A		mov ebx , [edx]
 00000736  8B 45 08		mov eax , rootNode
 00000739  89 18		mov [eax] , ebx

 0000073B  8B C2		mov eax , edx
 0000073D  81 EA 000000E1 R	sub edx , offset bst
 00000743  03 D0		add edx , eax
 00000745  83 C2 08		add edx , 8

 00000748  8B 1A		mov ebx , [edx]
 0000074A  83 FB 00		cmp ebx , 0
 0000074D  75 09		jne callAnotheFun

 0000074F  BB 00000000		mov ebx , 0
 00000754  89 18		mov [eax] , ebx
 00000756  EB 0B		jmp valueDeleted

 00000758			callAnotheFun:

 00000758  8B 18		mov ebx , [eax]
				invoke deleteNode , eax , ebx
 00000761  EB 00		jmp valueDeleted

 00000763			valueDeleted:
 00000763  C7 05 00000004 R	mov deleteFlag , 1
	   00000001
 0000076D  EB 19		jmp final_2

 0000076F			valueNotFound:
 0000076F  C7 05 00000004 R	mov deleteFlag , 0
	   00000000
 00000779  BA 000000D1 R	mov edx, offset notdelString
 0000077E  E8 00000000 E	call writeString
 00000783  E8 00000000 E	call crlf

 00000788			final_2:
				ret
 0000078C			deleteNode endp
				end main
Microsoft (R) Macro Assembler Version 14.00.23506.0	    11/19/19 21:46:45
BST.asm							     Symbols 2 - 1




Macros:

                N a m e                 Type

IsDefined  . . . . . . . . . . .	Func
Startup  . . . . . . . . . . . .	Proc
mDumpMem . . . . . . . . . . . .	Proc
mDump  . . . . . . . . . . . . .	Proc
mGotoxy  . . . . . . . . . . . .	Proc
mReadString  . . . . . . . . . .	Proc
mShowRegister  . . . . . . . . .	Proc
mShow  . . . . . . . . . . . . .	Proc
mWriteLn . . . . . . . . . . . .	Proc
mWriteSpace  . . . . . . . . . .	Proc
mWriteString . . . . . . . . . .	Proc
mWrite . . . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 0000A3A4 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 0000078C Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
deleteNode . . . . . . . . . . .	P Near	 00000637 _TEXT	Length= 00000155 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  value  . . . . . . . . . . . .	DWord	 bp + 0000000C
  l1 . . . . . . . . . . . . . .	L Near	 00000642 _TEXT	
  traverseLeft . . . . . . . . .	L Near	 00000656 _TEXT	
  traverseRight  . . . . . . . .	L Near	 0000066A _TEXT	
  fina1_1  . . . . . . . . . . .	L Near	 0000067E _TEXT	
  breakLoop  . . . . . . . . . .	L Near	 00000680 _TEXT	
  case1  . . . . . . . . . . . .	L Near	 000006AB _TEXT	
  case2  . . . . . . . . . . . .	L Near	 000006C1 _TEXT	
  deleteAtRight  . . . . . . . .	L Near	 000006CA _TEXT	
  deleteAtLeft . . . . . . . . .	L Near	 000006ED _TEXT	
  case3  . . . . . . . . . . . .	L Near	 00000709 _TEXT	
  l2 . . . . . . . . . . . . . .	L Near	 0000071F _TEXT	
  foundValue . . . . . . . . . .	L Near	 00000734 _TEXT	
  callAnotheFun  . . . . . . . .	L Near	 00000758 _TEXT	
  valueDeleted . . . . . . . . .	L Near	 00000763 _TEXT	
  valueNotFound  . . . . . . . .	L Near	 0000076F _TEXT	
  final_2  . . . . . . . . . . .	L Near	 00000788 _TEXT	
findMax  . . . . . . . . . . . .	P Near	 000005C9 _TEXT	Length= 00000037 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  traverseRightNode  . . . . . .	L Near	 000005E5 _TEXT	
  foundMaxValue  . . . . . . . .	L Near	 000005ED _TEXT	
  final  . . . . . . . . . . . .	L Near	 000005FC _TEXT	
findMin  . . . . . . . . . . . .	P Near	 00000600 _TEXT	Length= 00000037 Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  traverseLeftNode . . . . . . .	L Near	 0000061C _TEXT	
  foundMaxValue  . . . . . . . .	L Near	 00000624 _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000633 _TEXT	
insert . . . . . . . . . . . . .	P Near	 0000047C _TEXT	Length= 00000082 Public STDCALL
  leftNode . . . . . . . . . . .	L Near	 00000490 _TEXT	
  assignValueAtLeft  . . . . . .	L Near	 000004B8 _TEXT	
  rightNode  . . . . . . . . . .	L Near	 000004C1 _TEXT	
  assignValueAtRight . . . . . .	L Near	 000004E9 _TEXT	
  assignValueAtRoot  . . . . . .	L Near	 000004F2 _TEXT	
  final  . . . . . . . . . . . .	L Near	 000004F8 _TEXT	
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000047C Public STDCALL
  TypeScreen . . . . . . . . . .	L Near	 00000000 _TEXT	
  charType . . . . . . . . . . .	L Near	 0000009E _TEXT	
  intType  . . . . . . . . . . .	L Near	 000000A5 _TEXT	
  choice . . . . . . . . . . . .	L Near	 000000AC _TEXT	
  wrongChoice  . . . . . . . . .	L Near	 0000019B _TEXT	
  insertIntoTree . . . . . . . .	L Near	 000001B6 _TEXT	
  l1 . . . . . . . . . . . . . .	L Near	 000001FD _TEXT	
  readInteger  . . . . . . . . .	L Near	 00000209 _TEXT	
  readCharacter  . . . . . . . .	L Near	 00000210 _TEXT	
  endInput . . . . . . . . . . .	L Near	 00000227 _TEXT	
  traverseIntoTree . . . . . . .	L Near	 00000251 _TEXT	
  search . . . . . . . . . . . .	L Near	 00000292 _TEXT	
  readInteger2 . . . . . . . . .	L Near	 000002B4 _TEXT	
  readCharacter2 . . . . . . . .	L Near	 000002C0 _TEXT	
  endInput2  . . . . . . . . . .	L Near	 000002D7 _TEXT	
  found  . . . . . . . . . . . .	L Near	 000002F8 _TEXT	
  notFound . . . . . . . . . . .	L Near	 00000311 _TEXT	
  maxValueIntoTree . . . . . . .	L Near	 0000032A _TEXT	
  writeInteger . . . . . . . . .	L Near	 0000034F _TEXT	
  writeCharacter . . . . . . . .	L Near	 00000365 _TEXT	
  endInput3  . . . . . . . . . .	L Near	 00000379 _TEXT	
  minValueIntoTree . . . . . . .	L Near	 00000383 _TEXT	
  writeInteger2  . . . . . . . .	L Near	 000003A8 _TEXT	
  writeCharacter2  . . . . . . .	L Near	 000003BE _TEXT	
  endInput4  . . . . . . . . . .	L Near	 000003D2 _TEXT	
  deleteFromTree . . . . . . . .	L Near	 000003DC _TEXT	
  readInteger3 . . . . . . . . .	L Near	 000003FE _TEXT	
  readCharacter3 . . . . . . . .	L Near	 0000040A _TEXT	
  endInput5  . . . . . . . . . .	L Near	 00000421 _TEXT	
  printDeleteMessage . . . . . .	L Near	 00000438 _TEXT	
  noMessage  . . . . . . . . . .	L Near	 00000449 _TEXT	
  endProgram . . . . . . . . . .	L Near	 00000453 _TEXT	
preOrder . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
searchInTree . . . . . . . . . .	P Near	 0000056B _TEXT	Length= 0000005E Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  value  . . . . . . . . . . . .	DWord	 bp + 0000000C
  comeBack . . . . . . . . . . .	L Near	 00000591 _TEXT	
  traverseRightNode  . . . . . .	L Near	 000005AA _TEXT	
  traverseLeftNode . . . . . . .	L Near	 000005B5 _TEXT	
  found  . . . . . . . . . . . .	L Near	 000005C0 _TEXT	
  final  . . . . . . . . . . . .	L Near	 000005C5 _TEXT	
traverseInOrder  . . . . . . . .	P Near	 000004FE _TEXT	Length= 0000006D Public STDCALL
  rootNode . . . . . . . . . . .	DWord	 bp + 00000008
  print  . . . . . . . . . . . .	L Near	 00000515 _TEXT	
  printChar  . . . . . . . . . .	L Near	 00000521 _TEXT	
  printInt . . . . . . . . . . .	L Near	 00000532 _TEXT	
  endPrint . . . . . . . . . . .	L Near	 00000541 _TEXT	
  traverseRightNode  . . . . . .	L Near	 00000557 _TEXT	
  traverseLeftNode . . . . . . .	L Near	 0000055F _TEXT	
  final  . . . . . . . . . . . .	L Near	 00000567 _TEXT	
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

??0000 . . . . . . . . . . . . .	Byte	 00009D21 _DATA	
??0001 . . . . . . . . . . . . .	Byte	 00009D8D _DATA	
??0002 . . . . . . . . . . . . .	Byte	 00009DF9 _DATA	
??0003 . . . . . . . . . . . . .	Byte	 00009E65 _DATA	
??0004 . . . . . . . . . . . . .	Byte	 00009EB0 _DATA	
??0005 . . . . . . . . . . . . .	Byte	 00009EED _DATA	
??0006 . . . . . . . . . . . . .	Byte	 00009F28 _DATA	
??0007 . . . . . . . . . . . . .	Byte	 00009F60 _DATA	
??0008 . . . . . . . . . . . . .	Byte	 00009FCC _DATA	
??0009 . . . . . . . . . . . . .	Byte	 0000A038 _DATA	
??000A . . . . . . . . . . . . .	Byte	 0000A0A4 _DATA	
??000B . . . . . . . . . . . . .	Byte	 0000A0E8 _DATA	
??000C . . . . . . . . . . . . .	Byte	 0000A129 _DATA	
??000D . . . . . . . . . . . . .	Byte	 0000A16D _DATA	
??000E . . . . . . . . . . . . .	Byte	 0000A1B1 _DATA	
??000F . . . . . . . . . . . . .	Byte	 0000A1FF _DATA	
??0010 . . . . . . . . . . . . .	Byte	 0000A24D _DATA	
??0011 . . . . . . . . . . . . .	Byte	 0000A28B _DATA	
??0012 . . . . . . . . . . . . .	Byte	 0000A2A1 _DATA	
??0013 . . . . . . . . . . . . .	Byte	 0000A2C8 _DATA	
??0014 . . . . . . . . . . . . .	Byte	 0000A2D8 _DATA	
??0015 . . . . . . . . . . . . .	Byte	 0000A2E7 _DATA	
??0016 . . . . . . . . . . . . .	Byte	 0000A300 _DATA	
??0017 . . . . . . . . . . . . .	Byte	 0000A317 _DATA	
??0018 . . . . . . . . . . . . .	Byte	 0000A353 _DATA	
@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bst  . . . . . . . . . . . . . .	DWord	 000000E1 _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
deleteFlag . . . . . . . . . . .	DWord	 00000004 _DATA	
dividend . . . . . . . . . . . .	DWord	 0000000C _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
foundString  . . . . . . . . . .	Byte	 00000079 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
maxString  . . . . . . . . . . .	Byte	 000000A7 _DATA	
maxValueNode . . . . . . . . . .	DWord	 00000020 _DATA	
maxValue . . . . . . . . . . . .	DWord	 00000014 _DATA	
minString  . . . . . . . . . . .	Byte	 000000BC _DATA	
minValueNode . . . . . . . . . .	DWord	 0000001C _DATA	
minValue . . . . . . . . . . . .	DWord	 00000018 _DATA	
multi  . . . . . . . . . . . . .	DWord	 00000008 _DATA	
nFoundString . . . . . . . . . .	Byte	 0000008E _DATA	
notdelString . . . . . . . . . .	Byte	 000000D1 _DATA	
p1 . . . . . . . . . . . . . . .	Byte	 00000024 _DATA	
p2 . . . . . . . . . . . . . . .	Byte	 00000038 _DATA	
p3 . . . . . . . . . . . . . . .	Byte	 00000058 _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
tempIndex  . . . . . . . . . . .	DWord	 00000010 _DATA	
typeFlag . . . . . . . . . . . .	DWord	 00000000 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
